
The objective is to have a "nominal" notation for first-order models of some theories, where
contexts are explicit, and this notation is much more readable than raw CwF combinators. This
notation should be complete, in the sense that we can do arbitrary constructions and equational
reasoning purely on the notation. It could be viewed merely as elaboration/desugaring but I'm not
sure if that would be the most elegant formalization.

Let's assume some model of a TT as a cwf with type formers, internally in some meta-TT.
Let's also use "fst : Sub Γ (Δ,A) → Sub Γ Δ" and "snd" instead of "p" and "q".

First, we use named binders for the object model, the same way as in the metatheory. E.g. "lam
x. lam y. x" means "lam (lam (snd (fst id)))".

Second, we have a way to give name to the identity substitution, and when we go under a binder, this
gets weakened as well. Simple examples:

    id' : Sub Γ Γ
    id' = Λ γ. γ   -- id

    lam' : Tm (Γ,A) B → Tm Γ (Pi A B)
    lam' t = Λ γ. lam α. t[γ, α]       -- lam (t[fst id, snd id])

In "lam'", the "γ" gets weakened under the binder, so it's desugared to "fst id".

Let's write whitespace for substitution and substitution composition, so we have:

    lam' : Tm (Γ,A) B → Tm Γ (Pi A B)
    lam' t = Λ γ. lam α. t (γ, α)

    comp : Sub Δ Ξ → Sub Γ Δ → Sub Γ Ξ
    comp σ δ = Λ γ. σ (δ γ)                -- σ ∘ δ ∘ id

We can use pattern matching binding for substitutions:

    p' : Sub (Γ, A) Γ
    p' = Λ (γ, _). γ        -- fst id

    q' : Tm (Γ, A) (A[p'])
    q' = Λ (γ, α). α        -- snd id

We can also use nameful notation for contexts and contextual sorts. I think it looks good to uniformly
write contextual sorts with a fat arrow on the right of a context. For example, a unary parametricity
construction would look like this:

    Conᴾ : Con → Set
    Conᴾ Γ = Γ => Ty

    Tyᴾ : Conᴾ Γ → (Γ => Ty) → Set
    Tyᴾ Γᴾ A = (γ : Γ, γᴾ : Γᴾ γ, t : A γ) => Ty   -- Ty (Γ, Γᴾ, A[fst id])

    Subᴾ : Conᴾ Γ → Conᴾ Δ → (Γ => Δ) → Set
    Subᴾ Γᴾ Δᴾ σ = (γ : Γ, γᴾ : Γᴾ γ) => Tm (Δᴾ (σ γ))  -- Tm (Γ, Γᴾ) (Δᴾ[σ ∘ fst id])

    Tmᴾ : (Γᴾ : Conᴾ Γ) → Tyᴾ Γᴾ A → (Γ => Tm A) → Set
    Tmᴾ Γᴾ Aᴾ t = (γ : Γ, γᴾ : Γᴾ γ) => Tm (Aᴾ (γ, γᴾ, t γ))  -- Tm (Γ, Γᴾ) (Aᴾ[fst id, snd id, t[fst id]])

    ∙ᴾ : Conᴾ ∙
    ∙ᴾ = Λ (). ⊤

    _,ᴾ_ : (Γᴾ : Conᴾ Γ) → Tyᴾ Γᴾ A → Conᴾ (Γ,A)
    _,ᴾ_ Γᴾ Aᴾ = Λ (γ, α). Σ(γᴾ : Γᴾ γ) × Aᴾ (γ, γᴾ, α)  -- Σ (Γᴾ[fst id]) (Aᴾ[fst (fst id), snd id, snd (fst id)])

    ...

This is IMO already pretty nice and it has a straightforward desugaring.

However, we would also like to have complete equational reasoning purely on the contextual notation.

For Λ, we'd like to have the following "η" and "β" rules, for all contextual sorts:

    - t = Λ γ. t γ
    - (Λ γ. t) σ = t[γ ↦ σ] where "t[γ ↦ σ]" is capture-avoiding substitution as a meta-operation on
      the notation

But the β rule doesn't automatically make sense. Assuming "t : Γ => Tm A", the following all desugar
to the same thing:

    Λ γ. t
    Λ γ. t id
    Λ γ. t γ

A naive capture-avoiding β-rule only makes sense for the third form:

    t[γ ↦ σ] = t            -- ill-typed
    (t id)[γ ↦ σ] = t id    -- ill-typed
    (t γ)[γ ↦ σ]  = t σ     -- OK

So we have to restrict the notation.

    - Under Λ we can only write *contextual expressions*.

    - Contextual expressions are:
      - The Λ-bound variable (plus we have the pattern matching sugar)
      - fst, snd, (), _,_
      - type and term formers of the object model
      - variable names introduced in object binders
      - A pairing of a non-contextual type, term or substitution with a contextual substitution
        (this is the substitution or composition operation in the notation).

Now the "(Λ γ. t) σ = t[γ ↦ σ]" rule can be made to work. Assuming "t : Γ => Tm A", we can't write
"Λ γ. t", only "Λ γ. t γ", so there's always something for meta-substitution to hook into.

Note that whenever we "splice" a non-contextual thing into a contextual expression, we don't have
access to the contextually bound variables inside the splice. For example, "Λ γ. γ γ" is invalid,
because "γ" is not in scope on the left subterm of "γ γ".

Now, using the contextual expressions and equations, we can redefine all components of the original
model.

I think that this is very nice whenever we can't or don't want to use some fancier internal
language. We can also do anything that we can do with first-order models, e.g. have multiple object
models, as in the gluing construction. I also think that it's a lot more accessible to PL people
than fancy internal languages. The CPS/ANF/closure literature would especially benefit greatly from
this.

My notation is basically a generalization of Cocon. I worked it out when I
was trying to understand Cocon:

  https://arxiv.org/pdf/1901.03378


-- Semantics
--------------------------------------------------------------------------------

I'm not yet decided on a nice semantics for this thing.

First, let me summarize Cocon as prior work.

It's a standalone type theory with two syntactic layers, a meta-layer and the contextual layer. For
the contextual layer, we assume a theory given by a higher-order signature and optionally an
eliminator, but AFAIK the signature-generic case has not been formalized. We only have a single
object theory with a single model that's usually assumed to be the syntax. The whole thing is given
in old-school horizontal rule notation, and for "semantics" we have a huge normalization proof.

Clearly I want to do something better.

At first, I was thinking about a fairly stupid "elaboration semantics", where I actually
specify presyntax with names, and write a function that simply maps to a type theory
with an internal object model.

(The object model should have definitional substitution rules, but we could also just have
ETT for the time being)

This doesn't work super nicely for the equational reasoning. I can imagine something like

  - Have an elaboration from the notation to TT
  - Say that notations are convertible when they elaborate to equal things
  - Have capture-avoiding substitution on the notation
  - Show that substituted notation is elaborated to an object substitution
  - Hence, notation conversion validates all the desired equations

Instead, it would be good to have an algebraic spec of "TT with contextual notation". At some point,
we have to formalize variable names too, because that's the whole point, but we want an algebraic
spec such that it's easy to see how variable names are mapped to it. Similarly to how it's fairly
easy to map variable names to CwFs.

Maybe we can get some inspiration from an "intended model". The following sounds sensible to me.

The contextual layer should be a language for PSh(M/Γ), where M is an object model, Γ is the context
that we abstract when we write "Λ γ", and M/Γ is the contextual slice category. PSh(M/Γ) supports a
higher-order model of the object theory and also the "contents" of Γ.

Syntactically, we could have a proper type theory in each PSh(M/Γ), so that working in PSh(M/∙) is
the same as working in 2LTT over M. This could be a way to mix together any number of 2LTT-s in a
single framework.

The meta-layer is simply the set model.

"Λ γ. t : Tm Γ A" means that we evaluate "t" at the identity substitution.





























--------------------------------------------------------------------------------
