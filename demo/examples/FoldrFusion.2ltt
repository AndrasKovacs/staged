
-- Demonstration of basic staged foldr/build fusion
--------------------------------------------------------------------------------


let id : {A} → A → A
  = λ x. x;

let comp : {A B C} → (B → C) → (A → B) → A → C
  = λ f g x. f (g x);

-- Runtime Bool
------------------------------------------------------------

let Bool : U0
  := (Bool : U0)(true : Bool)(false : Bool) → Bool;

let true : Bool
  := λ _ t f. t;

let false : Bool
  := λ _ t f. f;

let case : {A} → Bool → A → A → A
  := λ b. b _;

-- Runtime Nat functions
------------------------------------------------------------

let iter0 : {A} → Nat0 → (A → A) → A → A
  := λ {A} n f a. NatElim0 (λ _. A) (λ _. f) a n;

let add0 : Nat0 → Nat0 → Nat0
  := λ a b. iter0 a suc0 b;

-- Runtime lists
------------------------------------------------------------

let List : U0 → U0
  := λ A. (L : U0)(cons : A → L → L)(nil : L) → L;

let nil : {A} → List A
  := λ L c n. n;

let cons : {A} → A → List A → List A
  := λ a as L c n. c a (as L c n);

let foldr : {A B} → (A → B → B) → B → List A → B
  := λ f z as. as _ f z;


-- Fusible lists
------------------------------------------------------------

let FList : U0 → U1
  = λ A. (L : U0)(cons : A → L → L)(nil : L) → L;

let fnil : {A : U0} → FList A
  = λ L c n. n;

let fcons : {A : U0} → A → FList A → FList A
  = λ a as L c n. c a (as L c n);

let fpure : {A : U0} → A → FList A
  = λ a. fcons a fnil;

let fmap : {A B : U0} → (A → B) → FList A → FList B
  = λ f as L c n. as L (λ a bs. c (f a) bs) n;

let fbind : {A B : U0} → FList A → (A → FList B) → FList B
  = λ as f L c n. as L (λ a l. f a L c l) n;

let ffilter : {A : U0} → (A → Bool) → FList A → FList A
  = λ f as L c n. as L (λ a l. case (f a) (c a l) l) n;

let fappend : {A : U0} → FList A → FList A → FList A
 = λ xs ys L c n. xs L c (ys L c n);


-- conversion
------------------------------------------------------------

let up : {A : U0} → List A → FList A
  = λ as L c n. foldr c n as;

let down : {A : U0} → FList A → List A
  = λ as. as _ cons nil;


-- fusion examples
------------------------------------------------------------

let f1 : List Nat0 → List Nat0
  := λ xs. down (fmap id (fmap suc0 (fmap suc0 (up xs))));

let f2 : List Nat0 → List Nat0
  := λ as. down (fappend (fmap suc0 (up as)) (fmap (comp suc0 suc0) (up as)));

let f3 : List Nat0 → List Nat0
  := λ as. down (
    fmap (add0 (suc0 zero0)) (
      fbind (up as) (λ x.
      fbind (up as) (λ y.
      fpure (add0 x y)))));

U0
