
Staging semantics TODO

Describe basic setup (psh over substitutions and strict (conversion-free) syntax
, types are a constant psh now)

Add identity type, W-type

  - Add to psh model
  - Add to completeness
  - Add to soundness


--------------------------------------------------------------------------------
Random potential citations

  kinds are calling conventions

  ANF translation early paper using CPS gen


--------------------------------------------------------------------------------

Generativity axioms

Yoneda review

(yA → B) ≃ |B|A

to : (yA → B) → |B|A
to f = f A id

from : |B|A → (yA → B)
|from β| X (f : Hom(x, A)) := β[f]

to (from β) = β
(from β) A id = β
(λ X f. β[f]) A id = β
β[id] = β OK

from (to f) = f
from (f A id) = f
λ x g. (f A id)[g] = f
λ x g. (f X (id ∘ g)) = f
λ x g. (f X g) = f
f = f

Constancy
--------------------------------------------------------------------------------

(↑A → K B) ≃ B

f : yA → K B

to show:
∀ X (α α' : Hom(X, A)). |f| X α = |f| X α'
  |f| X α = (|f| A id)[α] = |f| A id = (|f| A id)[α'] = |f| X α'
  OK

More generally:

axiom : Tm (A : Ty, a a' : ↑A, f : ↑A → Ty) (Id (f a) (f a'))

  ∀ Γ. (A : Ty)(a a' : Tm Γ A) (f : ∀ Δ (σ : Sub (Δ,Γ)) → Tm Δ A → Ty) → f Γ id a = f Γ id a'

  f Γ id a =
  f Γ (wkₓ ∘ (id, x ↦ a)) a
  f Γ (wkₓ ∘ (id, x ↦ a))(x[x ↦ a])
  (f (Γ,x) wkₓ x)[x ↦ a]
  (f (Γ,x) wkₓ x)

  f Γ id a' =      similarly
  (f (Γ,x) wkₓ x)

  f Γ id a = f Γ id a' OK

naturality of axiom:
  axiom (stuff[σ]) = (axiom stuff)[σ]  OK because equality is irrelevant

for valTy, if I have f : ↑A → ValTy, then (V ∘ f) : ↑A → Ty is constant by axiom

Virtual Σ and Π in object frament:

A : ValTy  B : ↑A → ValTy

loop : {A : ValTy} → ↑A
loop {A} = <letrec f : ⊤ → A = λ x. f x; f tt>

Σ* A B : ValTy
Σ* A B = A × B loop

fst* : ↑(Σ* A B) → ↑A
fst* x = <fst ~x>

snd* : (x : ↑(Σ* A B)) → ↑(B (fst* x))
snd* x = coerce from  ↑(B loop) to ↑(B (fst* x))
                by axiom
		<snd ~x>

pair* : (a : ↑A) → ↑(B a) → ↑(Σ* A B)
pair* a b =
  cast from ↑(A × B a)) to ↑(A × B loop)) by axiom
  <(~a, ~b)>

no β-eta rule, but we don't have that anyway for object types!

Π* : (A : ValTy) → (↑A → Ty) → CompTy
Π* A B = (A → B loop)

app* : ((a : ↑A) → ↑(B a)) → Π* A B
app* = ...

lam* : Π* A B → (a : ↑A) → ↑(B a)
lam* = ...

NOTE :
  generativity axiom is compatible with case on Ty!!!
  everything is compatible with case on Ty!!!
