

U₀ : U₀   -- universe of runtime types
U₁ : U₁   -- universe of static types

ℕ₀ : type of runtime naturals
ℕ₁ : type of static naturals

 A : U₀    a : A ⊢ B : U₀
------------------------
    (a : A) → B : U₀

 A : U₁    a : A ⊢ B : U₁
-------------------------
    (a : A) → B : U₁


  A : U₀
---------
 ^A : U₁               -- ^A : type of metaprograms which return expression with type A

 A : U₀  a : A
---------------
   <a> : ^A            -- metaprogram which immediately return "a" expression

  a : ^A
----------
  [a] : A             -- execute "a" metaprogram, insert its result into code output

<[t]> = t
[<t>] = t


∙ ⊢ t : A     s.t.  A : U₀

after staging:
  - every splice is computed to a runtime expression in "t"
  - we get is purely runtime expressions


id₁ : (A : U₁) → A → A
id₁ = λ A x. x

id₀ : (A : U₀) → A → A
id₀ = λ A x. x

id^ : (A : ^U₀) → ^[A] → ^[A]  -- redundant
id^ = λ A x. x

-- id^ <Bool₀> <true₀> : ^[<Bool₀>]
                       : ^Bool₀

main : Bool₀
main = [id^ <Bool₀> <true₀>]

-- after staging
main = true₀

-- using id₁
main : Bool₀
main = [id₁ ^Bool₀ <true₀>]  -- = true₀ after staging

-- analogously for polymorphic functions involving Π and Σ
-- compose₁ : {A B C : U₁} → (B → C) → (A → B) → A → C
-- compose₁ {^Bool₀}{^Bool₀}{^Bool₀} (λ b. <not₀[b]>) (λ b. <not₀[b]>) <true₀>

-- map function which inlines the function argument:

List₀ : U₀ → U₀
nil₀  : ...
cons₀ : ...

primitive
  foldr₀ : {A B : U₀} → (A → B → B) → B → List₀ A → B

map : {A B : ^U₀} → (^[A] → ^[B]) → ^(List₀ [A]) → ^(List₀ [B])
map = λ {A}{B} f as. <foldr₀ (λ (a : [A])(bs : List₀ [A]). cons₀ [f <a>] bs) nil₀ [as]>

-- assume : _+_ : Nat₀ → Nat₀ → Nat₀

fun : List₀ Nat₀ → List₀ Nat₀
fun = λ ns. [map (λ n. <[n] + 10>) <ns>]

  -- [<foldr₀ (λ a bs. cons₀ [f <a>] bs) nil₀ [as]>]
  -- [<foldr₀ (λ a bs. cons₀ [<[<a>] + 10>] bs) nil₀ [<ns>]>]
  -- foldr₀ (λ a bs. cons₀ (a + 10) bs) nil₀ ns

map : {A B : ^U₀} → ^([A] → [B]) → ^(List₀ [A]) → ^(List₀ [B])
map = λ {A}{B} f as. <foldr₀ (λ (a : [A])(bs : List₀ [A]). cons₀ <[f] a> bs) nil₀ [as]>

fun : List₀ Nat₀ → List₀ Nat₀
fun = λ ns. [map <λ n. n + 10> <ns>]

   -- after staging:  λ ns. foldr₀ (λ a bs. cons₀ ((λ n. n + 10) a) bs) ns


-- example with staging inference (it's quite easy to infer huge amounts of staging annotations)
map : {A B : ^U₀} → (A → B) → List₀ A → List₀ B
map = λ f as. foldr₀ (λ a bs. cons₀ (f a) bs) as


-- critical point of stage inference: let-definitions

    let x = t in u   -->    let₀ x = [t] in u
                     -->    let₁ x = t in <u>
		     -->    <let₀ x = [t] in u>
		     -->    <let₀ x = t in <u>>

    let x := t    -- level 0  (assignment with operational semantics)
    let x = t     -- level 1  (meta-level definition)

    let x := n + 10
        y := x + 100
    in x + y

    let x = <n + 10>   -- give an inline definition
    in [x] + y

------------------------------------------------------------

-- Application examples:
  ( work in the system above )
  -- fusion examples
  -- partially static data

-- Application which require specific runtime languages
--   Control over closures (runtime lang has no higher-order functions (explicit closure types))
--   Monomorphization      (runtime lang has no polymorphism)
--   Layout polymorphism   (runtime lang is monomorphic but has types with different memory layouts)


-- Fusion
------------------------------------------------------------

-- examples: Haskell: list fusion, stream fusion
--           Rust   : iterators (stream fusion)

-- basic example for fusion laws
--    Functor laws:   fmap f . fmap g = fmap (f . g)
--                    fmap id = id

-- sum [0..n]
--   -- tail-recursive loop with a sum accumulator (no lists created)

-- two ways of doing fusion:
--    initial Church-coding  of data    (fold fusion, push fusion)
--    terminal Church-coding of data    (unfold/stream fusion, pull fusion)


-- For lists:

data List₀ A = Nil₀ | Cons₀ A (List₀ A)      -- List₀ : U₀ → U₀

-- CList₀ A :=
    (List : U₀)
    (cons : A → List → List)
    (nil  : List)
    → List

-- toChurch : List₀ A → CList₀ A
-- toChurch as List cons nil = foldr₀ {List} cons nil as

-- fromChurch : CList₀ A → List₀ A
-- fromChurch as = as (List₀ A) cons₀ nil₀

-- ^(List₀ A) ≃
-- ^((L : U₀) → (A → L → L) → L → L) ≃
-- CList A := ((L : ^U₀) → (^[A] → ^[L] → ^[L]) → ^[L] → ^[L])          CList : ^U₀ → U₁

-- map f . map g = map (f . g)

map : {A B : ^U₀} → (^[A] → ^[B]) → CList A → CList B
map = λ f as List cons nil. as List (λ a l. cons (f a) l) nil

-- map f as = λ List cons nil. ....
--  map f (map f bs) = λ List cons nil
--    map f (map f bs) (List₀ A) cons₀ nil₀

toChurch : {A : ^U₀} → List₀ A → CList A
toChurch as List cons nil = foldr₀ {List} cons nil as

fromChurch : {A : ^U₀} → CList A → List₀ A
fromChurch as = as (List₀ A) cons₀ nil₀


-- in GHC : same principle
--

fun : List₀ Nat₀ → List₀ Nat₀
fun = λ ns. fromChurch (map (+20) (map (+30) (toChurch ns)))

fun' : List₀ Nat₀ → List₀ Nat₀
fun' = λ ns. fromChurch (map (+20) (map (+30) (toChurch ns)))

fun'' = fun . fun'
      =        toChurch (fromChurch ... )

-- additional rewrite rule:  toChurch is inverse of fromChurch

-- (f . g) x = f (g x)
-- (f . g) = \x -> f (g x)


                 we still have to write the *right*
       		         definitions
-- positive type --> ^(church coding) --> positive type

   -- conversion to *right* church definitions: "supercompilation", undecidable

CBool := (B : U) → B → B → B

not : CBool → CBool
not b B t f = b B f t     -- not . not ≡ id

not' : CBool → CBool
not' b = b CBool (λ B f t. f) (λ B f t. t)   -- not . not ≢ id

-- deeply embedded static data
-- embedded STLC       Tm₁ : Con₁ → Ty₁ → U₁

--   evalCon : Con₁ → U₁
--   evalTy  : Ty₁ → ^U₀
--   evalTm  : Tm₁ Γ A  → evalCon Γ → ^[evalTy A]

--   evalTm (lam (var 0)) --> λ₀ x. x
