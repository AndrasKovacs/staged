
==================== LLVM Code ====================
2021-03-11 15:35:08.907974867 UTC

target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-unknown-linux"


==================== LLVM Code ====================
2021-03-11 15:35:08.908259857 UTC

declare ccc i8* @memcpy$def(i8*, i8*, i64)


==================== LLVM Code ====================
2021-03-11 15:35:08.908396344 UTC

declare ccc i8* @memmove$def(i8*, i8*, i64)


==================== LLVM Code ====================
2021-03-11 15:35:08.908535267 UTC

declare ccc i8* @memset$def(i8*, i64, i64)


==================== LLVM Code ====================
2021-03-11 15:35:08.908669158 UTC

declare ccc i64 @newSpark$def(i8*, i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.908847623 UTC

!0 = !{!"root"}
!1 = !{!"top", !0}
!2 = !{!"stack", !1}
!3 = !{!"heap", !1}
!4 = !{!"rx", !3}
!5 = !{!"base", !1}


==================== LLVM Code ====================
2021-03-11 15:35:08.909048807 UTC



==================== LLVM Code ====================
2021-03-11 15:35:08.909645985 UTC

%GHCComp_bar_closure_struct = type <{i64}>
@GHCComp_bar_closure$def = internal global %GHCComp_bar_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @GHCComp_bar_info$def to i64)}>
@GHCComp_bar_closure = alias i8, bitcast (%GHCComp_bar_closure_struct* @GHCComp_bar_closure$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.911055822 UTC

@GHCComp_bar_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @GHCComp_bar_info$def to i8*)
define ghccc void @GHCComp_bar_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934604, i64 0, i32 14, i32 0}>
{
c1fw:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln1fz = mul i64 %R2_Arg, %R3_Arg
  store i64 %ln1fz, i64* %R1_Var
  %ln1fA = getelementptr inbounds i64, i64* %Sp_Arg, i32 0
  %ln1fB = bitcast i64* %ln1fA to i64*
  %ln1fC = load i64, i64* %ln1fB, !tbaa !2
  %ln1fD = inttoptr i64 %ln1fC to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1fE = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1fD( i64* %Base_Arg, i64* %Sp_Arg, i64* %Hp_Arg, i64 %ln1fE, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-03-11 15:35:08.912347996 UTC

%GHCComp_foo_closure_struct = type <{i64}>
@GHCComp_foo_closure$def = internal global %GHCComp_foo_closure_struct<{i64 ptrtoint (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @GHCComp_foo_info$def to i64)}>
@GHCComp_foo_closure = alias i8, bitcast (%GHCComp_foo_closure_struct* @GHCComp_foo_closure$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.913023423 UTC

@GHCComp_foo_info = alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @GHCComp_foo_info$def to i8*)
define ghccc void @GHCComp_foo_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i64, i32, i32}><{i64 8589934604, i64 0, i32 14, i32 0}>
{
c1fL:
  %R3_Var = alloca i64, i32 1
  store i64 %R3_Arg, i64* %R3_Var
  %ls1fo = alloca i64, i32 1
  %R2_Var = alloca i64, i32 1
  store i64 %R2_Arg, i64* %R2_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %ln1fS = load i64*, i64** %Sp_Var
  %ln1fT = getelementptr inbounds i64, i64* %ln1fS, i32 -2
  %ln1fU = ptrtoint i64* %ln1fT to i64
  %ln1fV = icmp ult i64 %ln1fU, %SpLim_Arg
  %ln1fX = call ccc i1 (i1, i1) @llvm.expect.i1( i1 %ln1fV, i1 0 )
  br i1 %ln1fX, label %c1fP, label %c1fQ
c1fQ:
  %ln1fZ = ptrtoint void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1fJ_info$def to i64
  %ln1fY = load i64*, i64** %Sp_Var
  %ln1g0 = getelementptr inbounds i64, i64* %ln1fY, i32 -2
  store i64 %ln1fZ, i64* %ln1g0, !tbaa !2
  %ln1g1 = load i64, i64* %R3_Var
  store i64 %ln1g1, i64* %R3_Var
  %ln1g2 = load i64, i64* %R2_Var
  store i64 %ln1g2, i64* %ls1fo
  %ln1g3 = load i64, i64* %R2_Var
  store i64 %ln1g3, i64* %R2_Var
  %ln1g5 = load i64, i64* %ls1fo
  %ln1g4 = load i64*, i64** %Sp_Var
  %ln1g6 = getelementptr inbounds i64, i64* %ln1g4, i32 -1
  store i64 %ln1g5, i64* %ln1g6, !tbaa !2
  %ln1g7 = load i64*, i64** %Sp_Var
  %ln1g8 = getelementptr inbounds i64, i64* %ln1g7, i32 -2
  %ln1g9 = ptrtoint i64* %ln1g8 to i64
  %ln1ga = inttoptr i64 %ln1g9 to i64*
  store i64* %ln1ga, i64** %Sp_Var
  %ln1gb = bitcast void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @GHCComp_bar_info$def to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1gc = load i64*, i64** %Sp_Var
  %ln1gd = load i64, i64* %R1_Var
  %ln1ge = load i64, i64* %R2_Var
  %ln1gf = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1gb( i64* %Base_Arg, i64* %ln1gc, i64* %Hp_Arg, i64 %ln1gd, i64 %ln1ge, i64 %ln1gf, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
c1fP:
  %ln1gg = load i64, i64* %R3_Var
  store i64 %ln1gg, i64* %R3_Var
  %ln1gh = load i64, i64* %R2_Var
  store i64 %ln1gh, i64* %R2_Var
  %ln1gi = ptrtoint %GHCComp_foo_closure_struct* @GHCComp_foo_closure$def to i64
  store i64 %ln1gi, i64* %R1_Var
  %ln1gj = getelementptr inbounds i64, i64* %Base_Arg, i32 -1
  %ln1gk = bitcast i64* %ln1gj to i64*
  %ln1gl = load i64, i64* %ln1gk, !tbaa !5
  %ln1gm = inttoptr i64 %ln1gl to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1gn = load i64*, i64** %Sp_Var
  %ln1go = load i64, i64* %R1_Var
  %ln1gp = load i64, i64* %R2_Var
  %ln1gq = load i64, i64* %R3_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1gm( i64* %Base_Arg, i64* %ln1gn, i64* %Hp_Arg, i64 %ln1go, i64 %ln1gp, i64 %ln1gq, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}
declare ccc i1 @llvm.expect.i1(i1, i1)


==================== LLVM Code ====================
2021-03-11 15:35:08.914988661 UTC

@c1fJ_info = internal alias i8, bitcast (void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)* @c1fJ_info$def to i8*)
define internal ghccc void @c1fJ_info$def(i64* noalias nocapture %Base_Arg, i64* noalias nocapture %Sp_Arg, i64* noalias nocapture %Hp_Arg, i64 %R1_Arg, i64 %R2_Arg, i64 %R3_Arg, i64 %R4_Arg, i64 %R5_Arg, i64 %R6_Arg, i64 %SpLim_Arg) align 8 nounwind prefix <{i64, i32, i32}><{i64 65, i32 30, i32 0}>
{
c1fJ:
  %R1_Var = alloca i64, i32 1
  store i64 %R1_Arg, i64* %R1_Var
  %Sp_Var = alloca i64*, i32 1
  store i64* %Sp_Arg, i64** %Sp_Var
  %ln1gr = load i64*, i64** %Sp_Var
  %ln1gs = getelementptr inbounds i64, i64* %ln1gr, i32 1
  %ln1gt = bitcast i64* %ln1gs to i64*
  %ln1gu = load i64, i64* %ln1gt, !tbaa !2
  %ln1gv = load i64, i64* %R1_Var
  %ln1gw = mul i64 %ln1gu, %ln1gv
  store i64 %ln1gw, i64* %R1_Var
  %ln1gx = load i64*, i64** %Sp_Var
  %ln1gy = getelementptr inbounds i64, i64* %ln1gx, i32 2
  %ln1gz = ptrtoint i64* %ln1gy to i64
  %ln1gA = inttoptr i64 %ln1gz to i64*
  store i64* %ln1gA, i64** %Sp_Var
  %ln1gB = load i64*, i64** %Sp_Var
  %ln1gC = getelementptr inbounds i64, i64* %ln1gB, i32 0
  %ln1gD = bitcast i64* %ln1gC to i64*
  %ln1gE = load i64, i64* %ln1gD, !tbaa !2
  %ln1gF = inttoptr i64 %ln1gE to void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64)*
  %ln1gG = load i64*, i64** %Sp_Var
  %ln1gH = load i64, i64* %R1_Var
  tail call ghccc void (i64*, i64*, i64*, i64, i64, i64, i64, i64, i64, i64) %ln1gF( i64* %Base_Arg, i64* %ln1gG, i64* %Hp_Arg, i64 %ln1gH, i64 undef, i64 undef, i64 undef, i64 undef, i64 undef, i64 %SpLim_Arg ) nounwind
  ret void
}


==================== LLVM Code ====================
2021-03-11 15:35:08.915794803 UTC

%GHCComp_zdtrModule4_bytes_struct = type <{[5 x i8]}>
@GHCComp_zdtrModule4_bytes$def = internal constant %GHCComp_zdtrModule4_bytes_struct<{[5 x i8] [i8 109, i8 97, i8 105, i8 110, i8 0]}>, align 1
@GHCComp_zdtrModule4_bytes = alias i8, bitcast (%GHCComp_zdtrModule4_bytes_struct* @GHCComp_zdtrModule4_bytes$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.916039728 UTC

%GHCComp_zdtrModule3_closure_struct = type <{i64, i64}>
@GHCComp_zdtrModule3_closure$def = internal global %GHCComp_zdtrModule3_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%GHCComp_zdtrModule4_bytes_struct* @GHCComp_zdtrModule4_bytes$def to i64)}>
@GHCComp_zdtrModule3_closure = alias i8, bitcast (%GHCComp_zdtrModule3_closure_struct* @GHCComp_zdtrModule3_closure$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.916246114 UTC

%GHCComp_zdtrModule2_bytes_struct = type <{[8 x i8]}>
@GHCComp_zdtrModule2_bytes$def = internal constant %GHCComp_zdtrModule2_bytes_struct<{[8 x i8] [i8 71, i8 72, i8 67, i8 67, i8 111, i8 109, i8 112, i8 0]}>, align 1
@GHCComp_zdtrModule2_bytes = alias i8, bitcast (%GHCComp_zdtrModule2_bytes_struct* @GHCComp_zdtrModule2_bytes$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.916461163 UTC

%GHCComp_zdtrModule1_closure_struct = type <{i64, i64}>
@GHCComp_zdtrModule1_closure$def = internal global %GHCComp_zdtrModule1_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_TrNameS_con_info to i64), i64 ptrtoint (%GHCComp_zdtrModule2_bytes_struct* @GHCComp_zdtrModule2_bytes$def to i64)}>
@GHCComp_zdtrModule1_closure = alias i8, bitcast (%GHCComp_zdtrModule1_closure_struct* @GHCComp_zdtrModule1_closure$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.916684031 UTC

%GHCComp_zdtrModule_closure_struct = type <{i64, i64, i64, i64}>
@GHCComp_zdtrModule_closure$def = internal global %GHCComp_zdtrModule_closure_struct<{i64 ptrtoint (i8* @ghczmprim_GHCziTypes_Module_con_info to i64), i64 add (i64 ptrtoint (%GHCComp_zdtrModule3_closure_struct* @GHCComp_zdtrModule3_closure$def to i64),i64 1), i64 add (i64 ptrtoint (%GHCComp_zdtrModule1_closure_struct* @GHCComp_zdtrModule1_closure$def to i64),i64 1), i64 3}>
@GHCComp_zdtrModule_closure = alias i8, bitcast (%GHCComp_zdtrModule_closure_struct* @GHCComp_zdtrModule_closure$def to i8*)


==================== LLVM Code ====================
2021-03-11 15:35:08.916863837 UTC

@ghczmprim_GHCziTypes_TrNameS_con_info = external global i8
@ghczmprim_GHCziTypes_Module_con_info = external global i8


==================== LLVM Code ====================
2021-03-11 15:35:08.916989987 UTC

@llvm.used = appending constant [7 x i8*] [i8* bitcast (%GHCComp_zdtrModule_closure_struct* @GHCComp_zdtrModule_closure$def to i8*), i8* bitcast (%GHCComp_zdtrModule1_closure_struct* @GHCComp_zdtrModule1_closure$def to i8*), i8* bitcast (%GHCComp_zdtrModule2_bytes_struct* @GHCComp_zdtrModule2_bytes$def to i8*), i8* bitcast (%GHCComp_zdtrModule3_closure_struct* @GHCComp_zdtrModule3_closure$def to i8*), i8* bitcast (%GHCComp_zdtrModule4_bytes_struct* @GHCComp_zdtrModule4_bytes$def to i8*), i8* bitcast (%GHCComp_foo_closure_struct* @GHCComp_foo_closure$def to i8*), i8* bitcast (%GHCComp_bar_closure_struct* @GHCComp_bar_closure$def to i8*)], section "llvm.metadata"

