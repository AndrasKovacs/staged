
RTS summary

- gcc codegen, single thread, semispace GC

- GC
  - Hp pointer is pinned to a (callee-save) global register variable
  - Hp overflow checked by SIGSEGV signal handler and a no-write guard page at the end of the arena
      - We use inline volatile asm chunk, which
        - clobbers "memory" and appropriate registers
	- Requires frame ptr to be in a given register on entry
	- The code first increments Hp, then tries to write Hp to *Hp. This may throw segfault.
      - This means that Hp alloc is merely 2 branchless instructions, and we don't need HpLim register.
  - We use native C stack
  - We use a shadow stack embedded in the C stack.
    - Each frame is an array of gcrefs with a pointer to the previous frame.
    - Every stack-allocating function gets the frame pointer as first argument.
  - When the SIGSEGV handler runs
    1. We get Hp and the frame pointer out the handler context
    2. We check that Hp is actually over the guard page. If not, we abort the program, because
       what we've caught is a "real" segfault instead.
    3. We do GC run using the frame ptr.
    4. We return to (RIP + size of mov instruction which page faulted).

- GC copying
  - Should we do DFS or Cheney copying? DFS seems nicer for locality.
  - Before GC, we create a bitarray for every word on the heap, which marks
    whether some word has been relocated. We need this because the objects
    are effectively tagless and don't generally have space for the forwarding bit.

- Codegen
  - Lowest-level representation is ANF with explicit frame alloc, heap alloc, frame/heap store/reads.
    - We try to aggregate multiple heap allocs
    - We try to elide store/loads between GC statepoints.
    - Unboxed data on stack is not managed by codegen, left to gcc to handle
    - We have to mark tail calls explicitly, by not passing the latest frame ptr
      in a call, but the frame ptr of the outer calling function.
      - gcc can only insert tail calls if we take care of shadow stack frame reuse
