
- Using trained zstd compression to speed up interface write/read
  + Per-project zstd dictionary? Single pre-cooked dict?
  + Compact region serialization? Probably not worth because of large size.
    Only worth if we already have packed data.


- TYPE SYSTEM:

  universes: USmall : UMeta
             ULarge : UMeta
	     UMeta  : UMeta
	     USmall ≤ ULarge

  Hence, runtime types are elements of a meta-type.

  ^ : USmall → UMeta       (<_>,[_]) : A ~ ^A
  ^ : ULarge → UMeta       (<_>,[_]) : A ~ ^A

  Subtyping:
    A ≤ ^A
    ^A ≤ A
    A' ≤ A ∧ B ≤ B' → (A → B) ≤ (A' → B')
    USmall ≤ ULarge ≤ UMeta

  later revise? Add irrelevant quantification to runtime lang, for phantom types
  bounds checking, region typing, etc?

  Meta level:

    Row : type of rows, just a list of (Name,^USmall) pairs

    Sum  : Row → ^USmall                always represented as a generic obj
    Prod : Row → ^USmall                is always unpacked
    Fix  : (^USmall → Row) → ^USmall    only on top level?


    How to do rep normalization?
      - flatten nested products
      - group unboxed/obj product fields

      - should this be a pass over monomorphic core?
      - we do something like

        normalize : USmall -> USmall    (metafunction)
      	  (to : ^A → ^(normalize A))
	  (fr : ^(normalize A) → ^A)

        and evaluate transports

      - in elaboration, we don't want normalized types (must be typed exactly as user wrote)
      - perhaps we can put norm in staging? together with representation checks



- RUNTIME REP:


  1. Sum type Rep:

    64 bits:

      7 : tag | 6 : numobjs | 6 : numwords | 45 : ref

    - We get the tag by shifting once right
    - We get the ref by first shifting left, then arith shifting right

    Hence: a sum type may have 128 variants, each variant may have 64 obj
           fields and 64 unboxed fields

    We check this at staging, we just throw an error if limits are exceeded.

    A plain pointer is a singleton Sum:

      Ref A := Sum {deref : A}

    How to support fancy rep opt? With typecase?

      -- collapsed Maybe/Ref : this seems to work fine!

      Maybe : VTy → VTy → VTy
      Maybe (Sum As) = Sum {⊤, As}                   -- nullptr opt
      Maybe A        = Sum {Nothing : ⊤, Just : A}

      Ref : VTy → VTy
      Ref (Sum As) = Sum As
      Ref A        = Sum {deref : A}

      Nothing : {A : VTy} → Maybe A
      Nothing {Sum As} = inj 0 tt
      Nothing {A}      = Nothing


      -- Flat Either requires more induction on things.
      -- Likewise flat products. Maybe builtin magic operators
      --  would be better?
      Either : VTy → VTy → VTy
      Either (Sum As) (Sum Bs) = Sum (As ++ Bs)
      Either A        (Sum Bs) = Sum (A : Bs)
      Either (Sum As) B        = Sum (B : As)
      Either A        B        = Sum (Left : A, Right : B)

      -- I have to write functions for (Sum (As ++ Bs))!
      -- This would iterate over the ctor tag...
      inj₁ : {As Bs} → Sum As → Sum (As ++ Bs)
      inj₁ {[]}{Bs}   a              = exfalso a
      inj₁ {A:As}{Bs} (inj0       a) = ...
      inj₁ {A:As}{Bs} (inj(suc n) a) = ...

      -- let's leave Sum transform / flattening and non-uniform types for later


-- comp : {A B C : VTy} → (B → C) → (A → B) → A → C
-- comp = λ f g x. f (g x)

Fix : (VTy → Row)


UV ≤ UC ≤ UM     value types ≤ computation types ≤ meta types

Label : UM                 -- A way to create a runtime binder from a Label?
Row   : UM
[]    : Row
_:_   : Label → UV → Row


-- should I go full generic recursive types?
Rec : Row → UV
Sum : Row → UV

Fix : (UV → Row) → UV

in  : Σ(F (Fix F)) → Fix F
out : Fix F → Sum (F (Fix F))

Fix F ≤ Sum (F (Fix F))
Sum (F (Fix F)) ≤ Fix F

List : VTy → VTy
List = λ A. Fix (λ LA. {nil, cons : Π{A, LA}})

nil : {A : VTy} → List A
nil {A} = in nil

cons : {A : VTy} → A → List A → List A
cons {A} a as = in (cons {a, as})

map : {A B : VTy} → (A → B) → List A → List B
map = λ {A}{B} f. fix λ go as. case (out as) of
        nil{}       → in(nil{})
	cons{a, as} → in(cons {f aas.1, go aas.2})

map : {A B : VTy} → (A → B) → List A → List B
map = λ f. fix go as. case as of
             nil{}       → nil{}
	     cons{a, as} → cons{f a, go as}

map : {A B : VTy} → (A → B) → List A → List B
map = λ f. fix go as. case as of
  nil       → nil
  cons a as → cons (f a) (go as)


-- If I don't want interior mutation and generic magic, perhaps
-- I can just do plain ADTs.

-- A bit noisy

-- This is probably a bit cleaner, but what about muh generic sums?
-- Let's only have generic products for now, but not sums?

data List : VTy → VTy where
  nil  : {A : VTy} → List A             -- sugar: assume that {A} is VTy?
  cons : {A : VTy} → A → List A

data Nat : VTy where
  zero : Nat
  suc  : Nat → Nat

data List : VTy → VTy where
  nil  : {A} → List A
  cons : {A} → A → List A

-- what if records are also not generic? That's kind of lame
