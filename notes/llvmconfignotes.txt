
-ftime-trace

https://github.com/aras-p/ClangBuildAnalyzer

Questions:

  - how can I make opt and clang not do any optimization in general, but still     do some specific
    things, like tailcallopt and non-crappy register allocation?

  - Can I pass llc/opt options through clang?

  - Can I parallel build with any llvm tools?

  - Which one is better, fastcc/tailcc or GHC cconv? Should bench.

  - does marking args as register-passed break tailcalls?
    LangRef says:
      "The calling conventions of the caller and callee must match.

      "All ABI-impacting function attributes, such as sret, byval, inreg, returned, and inalloca,
      must match."

    Does this mean that fastcc + inreg + musttail = "custom" calling convention?


  - inreg doesn't seem to do anything! ("target specific calling convention?")

  - TODO: look at struct returns


Calling convention:

  - pass hp, hplim, frame
  - return hp and hplim
  - in short: hp and hplim in State, frame in Reader

  - we need: a calling convention which fits VM regs nicely, both in call and return.

    - in any given cconv, it's possible to somewhat game the system

    - fastcc: 6 call regs, 3 return regs, if more than 3 return, everything is returned on stack
           - how to improve? return 3 things in struct, return the rest through stack return address

    - cc 10:
      - call regs: r8, r9, r12, r13, r14, r15, rbx, rcx, rdx, rdi, rsi, rbp  (12 registers)
        what's missing: rax, r10, r11


    - ONLY cc 10 and fastcc support TCO!
      - swiftcc would be fine (as we get +2 return regs), but it doesn't support TCO!
        (but maybe it does, because opt will simply turn things to loops! Already opt loopifies plain C a lot!)



OPTIMIZATIONS:

  - call pattern specialization: lowering fix!
  - lifting: pulling out computation from under lambda
  - lowering: pushing computation under lambda
  - inlining
  - finite case commutation
  - beta-reduction
  - supercompilation: fix-case commutation
