
-- LLVM: function prefix: tables next to code (officially supported)
--------------------------------------------------------------------------------

-- Biggest issue with LLVM: knows nothing about memory allocation!
--     --> turns LLVM into a portable assembler

-- let ys = Cons 10 (Cons 20 (Cons 30 xs))        (assume bump ptr allocation with copying GC)
--     --> three different heap checks and calls to GC, for three Cons!
--     --> in GHC: CmmOpt tries to aggregate heap alloc

--  LLVM does: inlining, code motion, dead code elim,
--     issue : we need some kind of custom pass
--     - Csaba       : add new intrinsic to LLVM
--     - alternative : do your own opt, llc -O1

-- relocating GC: painful with LLVM,

   f (a, b, c) =
      let d = g(a, b)             -- after every function call, every gcref in scope is invalid
      let x = h(a, c)             --    we have to store every gcref which is later used on the stack somewhere
                                  --    before every function call ("statepoint")
      ....

  LLVM GC:
     -- builtin features: gcroot / statepoint
     -- do our own GC ("explicit"): generate code respecting storage/liveness requirements

  usual LLVM:

  -- 1. store stuff in stack frame before calls

   f (a : Obj, b : Obj, c : Obj) =

      let {a' = a,
           b' = b,
	   c' = c}

      let d = g(*a', *b')    -- load/store when we want use it
      let x = h(*a', *c')
      ...

  -- Not having relocation?
     - Perceus/Lean4 reference counting
        - benchmarks:
	   - I'm skeptical (explicit refcounting semantics/optimization instructions in the frontend language)
	   -     refcounting benefits: in-place updates, better latency, stable pointers
	   -                 disadv:   worse perf-for-complexity, you can just throw memory at copying GC instead
	   -                           (if you don't care that much about latency)
	   -                                (incremental computation vs. batch computation)

     - Mark/sweep + mimalloc :
        - for every N size of heap objects, we maintain free-lists
       	   - opt:   f function, only allocates objects of size 3, 4 (pass free list ptrs to functions)
	       (analogous: Hp, HpLimit in registers)

        - I just want to alloc 2 Int64-s, still not necessarily contiguous


-- (Calling/storage convention optimized for relocating GC)

  idea: pass Objects by reference to functions.


  f(a : Obj, b : Obj, c : Obj) =        -- we have to keep a, b, c relocate-able

     x0 = g(a, b)
     x1 = h(a, c)

     ...

  -- pointless to pass a, b, in registers!

  f(a, b, c : Obj*) =         -- reuse stack location in subsequent calls

    x0 = g(a, b)
    x1 = h(a, c)


  outer :

    a = ...
    b = ...
    c = ...
    d = f(&a, &b, &c)

  -- Issues: good if we pass stack-alloc'd things
  --         worse if we pass heap-alloc'd things

  map(xs) = case xs of              -- assumption: every argument to functions is alive on entry
    []   -> ret []
    x:xs ->
       y  = x + 1
       ys = map xs
       ret (y:ys)

Another problem:  tail calls

  f(a, b, c : Obj*) =
    x0 = g(a, b)
    x1 = h(a, c, &x0)   -- tail call
    ret x1

  -- we can't pop because it invalidates &x0
  -- solution: if tail call in f: pass Obj by "value"
  --           otherwise pass Obj by refs


-- Calling conventions:
--------------------------------------------------------------------------------

- LLVM: fixed number of calling conventions, mix them, no custom calling conv

   - Only three cconv's have tail calls (in general) :
     fastcc (internal LLVM convention, also used by Rust), GHC conv, HiPE conv

   - fastcc : pass 6 arguments in register, others on stack, return at most 3 words in registers, tail calls
   - GHC    : pass 12 arguments in registers at most, returns at most 3 words in regs, tail, NO callee save registers
   - HiPe   : doesn't work (requires instrumention in IR input, don't know what)

   - We want "register pinning" : pass heap pointer, heap limit, frame pointer
   - No callee save: too YOLO
   - (some balance would be better)

--------------------------------------------------------------------------------

Weird idea (ultra-small cconv):

  outer ()

    frame {a = ...                     -- if program is in ANF the
           b = ...
           c = ...
           d = ...}

    in f(&frame, bitmask of a, b, c)

-- Current plans:
--------------------------------------------------------------------------------

  -- LLVM backend + shadow stack + copying GC   (it could be just C)

  -- shadow stack:

    backend code: by default a function gets three extra args: heap pointer, heap limit pointer, frame pointer

      frame pointer: points to the previous stack frame in scope

    struct Frame {
       Frame* prev;
       uint64_t number_of_gcrefs;
       Obj payload[];
    }

    f(Hp, HpLim, Frame, ....) =
       <initialize Frame>          -- link new frame to old Frame
       myFrame.payload[3] = <obj>  -- store to frame
           -- perform_gc(&myFrame)

    Frames are embedded in native LLVM stack, unboxed things are also on native stack, but we don't have to handle them specially
    shadow stack: embedded list of frames

    -- alternative to shadow stack: "stack maps"
       -- every call-site is associated with a metadata of how the stack is laid out at the point of the call
       -- mutator code has not additional storage/call overhead
       --  slower traversal (table lookup when going to prev frame)

    -- exceptions for control flow: (can be more efficient)
    --                              (delimited control effects, extensible)


-- frontend (type system, layout control)
--------------------------------------------------------------------------------

current version:

 ( value type )     (computation types)         (meta types)
      VTy        ≤           CTy            :       MTy

   _→_ : VTy → CTy → CTy

  -- id : {A : CTy} → A → A
  -- comp : {A B : VTy}{C : CTy} → (B → C) → (A → B) → A → C

ADT-s:

data List A = Nil | Cons A (List A)

records: type of rows (at meta level),

    Row : MTy
    []  : Row
    _,_ : Label → VTy → Row → Row        -- {foo : Int, bar : Bool}
    Rec : Row → VTy

fixpoints, no general letrec
case expressions

-- representation: ADT-s are always Objects (always a tagged pointer)

--      data Maybe A = Nothing | Just A

--    Object rep: 45 bits of actual ptr data, 19 bits of metadata (incl constructor tag + numer of objs & words in constructor)
--       7 + 6 + 6
--       6 + 5 + 5 + 3

-- every record is always a flat tuple,

-- every ADT constructor : first we have all Obj, then all words

-- normalization for representation:
--     - flatten all products, e.g.     {x : Int, {y : Int, z : Int}} --> {x , y, z : Int}
--     -    group Obj and words         {x : Int, {y : Obj, z : Int}} --> {x, z : Int | y : Obj}


-- plan: during staging: - unrepresentable data types cause error
--                       - compute normalizations (normalization ~ type iso in meta level)


   -- how to pack Obj:

        6                   45
    ctor tag | gc info | ptr data

     -- getting ctor tag : 1 right shift
     -- getting ptr data : 1 left shift + 1 arithmetic right shift


-- iso-recursive types:

--   rows + sums of rows + products of rows + iso-recursion
     (every sum is an object, every prod is a flat tuple)

    Sum{foo : Int, bar : Int}
    Sum{foo : Prod{x : Int, y : Int}, bar : Int}

-- recursive types: Type fixpoint returning in Row

TyFix : (VTy → Row) → VTy

let List : VTy → VTy
    List = λ A. TyFix (λ L. {nil : Top, cons : Prod{head : A, tail : L}})

-- iso-recursion :
    (wrap, unwrap) : Sum (F (TyFix F)) ~ TyFix F

-- plan : compile to lower-level code, run it in interpreter
