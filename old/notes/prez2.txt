
(stream) Fusion

- fusion: data dependency --> control flow

  b : Bool                    (érdékes: hogyan változik control flow b értékétől függően)
  if b then True else False

  not : Bool -> Bool
  not b = if b then False else True

  not (not b)  -->  if (not b) then False else True
               -->  if (if b then False else True) then False else True

                    if b then (if False then False else True)
		              (if True then False else True)

               --> if b then True else False     -- ("identity extension", Bool-η)
	       --> b

  Fold fusion "not" függvényre: CPS transzformáció


  Bool' : (A : Type) → A → A → A          (Church-kódolása Bool-nak)

  not' : Bool' → Bool'          not' : ((A : Type) → A → A → A) → (A : Type) → A → A → A
  not' = λ b A t f. b A f t

  not' (not' b) = not' (λ b A t f. b A f t)
                = λ b A t f. (λ b A t f. b A f t) A f t
		= λ b A t f. b A t f
		= b

  fold fusion: CPS-kódolt adat + "fusing" definíciók

  true' : Bool'
  true' = λ A t f. t     -- Church kódolt konstruktorok

  false' : Bool'
  false' = λ A t f. f

  not'' : Bool' → Bool'
  not'' b = b Bool' false' true'

  not'' (not'' b) = (b Bool' false' true') Bool' false' true'

  -- hogyan tudunk automatikusan fusing definíciót kapni eredeti def-ből?
       ~ supercompilation

  GHC Haskell: GHC.List -- foldr fusion listákhoz

     GHC: inline + case-of-case + let-floating -tól függ a fúzió + rewrite rule


-- fold fusion summary:
  + minden ADT-re (majdnem mindig)
  + viszonylag kevés compiler magic-el működik
  - csak rekurzorral írható függvényekre működik   (ellenpélda: tails)
  - listák: zip függvény nem működik


codata HFun a b = Cons (a -> b) (HFun a b)
newtype HFun a b = HFun (HFun b a -> b)

-- stream fusion
--------------------------------------------------------------------------------

-- Terminális Church-kódolás (koinduktív reprezentáció)
--   adat helyett state machine reprezentáció

data CoList a = Nil | Cons a (CoList a)  -- (Haskell)

record CoList A where
  coinductive
  constructor colist
  fields
    next : Maybe (A, CoList A)

as : CoList A
as.next : Maybe (A, CoList A)

case as.next of
  Just (a, as') -> as'.next

-- közvetlen state machine definíció (Church kódolás)

CoList A = Σ(S : Type) × (S → Maybe (A, S)) × S

List A   = (L : Type) → (A → L → L) → L → L               Π(M : Algebra) → U M
CoList A = Σ(L : Type) × (L → Maybe (A, L)) × L           Σ(M : Algebra) × U M


record CoList A
  fields:
    State : Type
    step  : State → Maybe (A, S)
    seed  : State


induktív adat  -->  Church kódolás --> meta-komputáció --> induktív adat
               -->  ko-Church kódolás (állapotgépek) --> meta-komputáció --> induktív adat




























-- stream fusion summary:
  - több compiler magic kell hozzá
