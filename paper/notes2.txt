
Assume Setω in metatheory, use that for cxt interpretation.

type formers
  - ⊤, Π, Σ, Uᵢ (Coquand style), Bool

  U(i,j) : Ty(i,j+1) Γ
  El     : Tm(i,j) U → Ty(i,j) U
  code   : Ty(i,j) U → Tm(i,j) U   inverses

naming questions:
  - base TT           : 𝕀
  - 2LTT syntax       : just 2LTT
  - eval map          : 𝔼
  - inner restriction : ℝ
  - level names: inner, outer
  - use [_] for psh restriction
  - Call Set̂ Û instead?

-- Psh model
--------------------------------------------------------------------------------

F (A : Ty₀ Γ)   : Sub̂ FΓ TyB
F (t : Tm₀ Γ A) : Tm̂ FΓ TmB[FA]

F (^(A : Ty₀ Γ)) = TmB[FA]
F <t> = Ft
F ~t  = Ft

F (Γ ▶₀ A) = Σ FΓ TmB[FA]

...

--------------------------------------------------------------------------------

-- closed staging, yoneda etc

Closed staging

A : Ty₀ ∙
|A| tt : TyB ∙

t : Tm₀ ∙ A
|t| tt : TmB ∙ (|A|tt)


Correctness of eval into psh model
--------------------------------------------------------------------------------

- B       : syntax of base theory
- 2LTT    : syntax of 2LTT
- BMod    : model of B
- 2LTTMod : model of 2LTT
- 2LTTᵒ   : models B by forgetting Ty₀ and Tm₀ from 2LTT

- -^  : components of PSh B, e.g. Con̂, Tŷ, Set̂ , etc.
- F   : 2LTT → PSh B, evaluation into PSh B model of 2LTT (strict morphism)
- ⌜⌝  : B → 2LTTᵒ, embedding


-- Stability
--------------------------------------------------------------------------------

(Γ : ConB)ᴾ     : |F⌜Γ⌝|Γ              -- generic environment
(σ : SubB Γ Δ)ᴾ : Δᴾ[σ] = |F⌜σ⌝| Γᴾ
(A : TyB Γ)ᴾ    : A = |F⌜A⌝| Γᴾ
(t : TmB Γ A)ᴾ  : t = |F⌜t⌝| Γᴾ

∙ᴾ : |F⌜∙⌝|∙
   : ⊤
∙ᴾ := tt

(Γ ▶ A)ᴾ : |Σ^ F⌜Γ⌝ TmB[F⌜A⌝]| (Γ ▶ A)
         : (γ : F⌜Γ⌝(Γ▶A)) × TmB (Γ ▶ A) (|F⌜A⌝| γ)
(Γ ▶ A)ᴾ := (Γᴾ[p], q)

   q : TmB (Γ ▶ A) (|F⌜A⌝| (Γᴾ[p]))
     : TmB (Γ ▶ A) ((|F⌜A⌝| Γᴾ)[p])
     : TmB (Γ ▶ A) (A[p])

idᴾ : Γᴾ[id] = |F⌜id⌝| Γᴾ
    : Γᴾ = Γᴾ OK

(σ ∘ δ)ᴾ : Σᴾ[σ∘δ] = |F⌜σ∘δ⌝| Γᴾ
         : Σᴾ[σ][δ] = |F⌜σ⌝| (|F⌜δ⌝| Γᴾ)
	 : Σᴾ[σ][δ] = |F⌜σ⌝| Δᴾ[δ]
	 : Σᴾ[σ][δ] = (|F⌜σ⌝| Δᴾ)[δ]
	 : Σᴾ[σ][δ] = Σᴾ[σ][δ] OK

(A[σ : Sub Γ Δ])ᴾ : A[σ] = |F⌜A[σ]⌝| Γᴾ
                  : A[σ] = |F⌜A⌝[F⌜σ⌝]| Γᴾ
		  : A[σ] = |F⌜A⌝| (|F⌜σ⌝| Γᴾ)
		  : A[σ] = |F⌜A⌝| (Δᴾ[σ])
		  : A[σ] = (|F⌜A⌝| Δᴾ)[σ]
		  : A[σ] = A[σ] OK

(t[σ])ᴾ : t[σ] = |F⌜t[σ]⌝| Γᴾ
        : t[σ] = |F⌜t⌝| (|F⌜σ⌝| Γᴾ)
        : t[σ] = |F⌜t⌝| (Δᴾ[σ])
        : t[σ] = (|F⌜t⌝| Δᴾ)[σ]
        : t[σ] = t[σ] OK

(σ,t)ᴾ : (Δ▶A)ᴾ[σ,t] = |F⌜σ,t⌝| Γᴾ
       : (Δᴾ[σ], t)  = |F⌜σ,t⌝| Γᴾ
       : (Δᴾ[σ], t)  = (|F⌜σ⌝|Γᴾ, |F⌜t⌝| Γᴾ)
       : (Δᴾ[σ], t)  = (Δᴾ[σ], t)  OK

pᴾ : Γᴾ[p] = |F⌜p⌝| (Γ▶A)ᴾ
   : Γᴾ[p] = |F⌜p⌝| (Γᴾ[p], q)
   : Γᴾ[p] = Γᴾ[p] OK

qᴾ : q = |F⌜q⌝| (Γ▶A)ᴾ
   : q = |F⌜q⌝| (Γᴾ[p], q)
   : q = q OK

⊤ᴾ : ⊤ = |F⌜⊤⌝| Γᴾ
   : ⊤ = ⊤ OK

ttᴾ trivial

Πᴾ : Π A B = |F(⌜Π A B⌝)| Γᴾ
   : Π A B = Π (|F⌜A⌝| Γᴾ) (|F⌜B⌝| (Γᴾ[p], q))
   : Π A B = Π (|F⌜A⌝| Γᴾ) (|F⌜B⌝| (Γ▶A)ᴾ)
   : Π A B = Π A B OK

(app t)ᴾ : app t = |F⌜app t⌝| (Γ▶A)ᴾ
         : app t = |F⌜app t⌝| (Γᴾ[p], q)
	 : app t = app (|F⌜t⌝| Γᴾ)
	 : app t = app t OK

(lam t)ᴾ : lam t = |F⌜lam t⌝| Γᴾ
         : lam t = lam (|F⌜t⌝| (Γᴾ[p], q))
	 : lam t = lam t OK

Σᴾ likewise
Boolᴾ likewise

-- BoolElim : (B : Ty (Γ ▶ Bool))
            → Tm Γ (B[id,true]) → Tm Γ (B[id,false]) → (b : Tm Γ Bool) → Tm Γ (B[id,b])

(BoolElim B t f b)ᴾ :
  BoolElim B t f b = |F⌜BoolElim B t f b⌝| Γᴾ
  BoolElim B t f b = ...
  OK

(U j)ᴾ : U j = |F⌜U j⌝| Γᴾ
       : U j = U j

(code t)ᴾ : code t = |F⌜code t⌝| Γᴾ
          : OK

El likewise


-- open staging
--------------------------------------------------------------------------------


Stage : Ty₀ ⌜Γ⌝ → TyB Γ
Stage A := |F A| Γᴾ

Stage : Tm₀ ⌜Γ⌝ ⌜A⌝ → TmB Γ A
Stage t := |F t| Γᴾ

Stage' : Tm₀ ⌜Γ⌝ A → TmB Γ (Stage A)
Stage' t := |F t| Γᴾ


-- Soundness
--------------------------------------------------------------------------------

The idea is to have a straightforward logical relation between the staging map F
and a suitably "syntactic" embedding morphism. It's an instance of gluing, but
we don't do gluing because we like to have a clean & self-contained definition
of the staging algorithm, and the gluing presentations either mash it together
with its soundness (HKS gluing), or are way too magical (synthetic computability).

Things in psh model:

  Syntactic base types and terms. Closed under type formers, but we don't use that.

    TyB : Set̂
    |TyB|ᵢ = TyB i

    TmB : TyB → Set̂
    |TmB|ᵢ A = TmB i A

  Syntactic inner 2LTT types and terms.

    Ty₀ : Set̂
    |Ty₀|ᵢ = Ty₀ ⌜i⌝

    Tm₀ : Ty₀ → Set̂
    |Tm₀|ᵢ A = Tm₀ ⌜i⌝ A

  *Not* closed under proper type formers, because we can only abstract over
  inner things in pshB.

  Embedding internally:

     ⌜-⌝ : TyB → Ty₀
     |⌜⌝|ᵢ (A : TyB i) = ⌜A⌝

     ⌜-⌝ : TmB A → Tm₀ ⌜A⌝
     |⌜⌝|ᵢ {A} (t : TmB i A) = ⌜t⌝

  ⌜⌝ preserves all structure


Syntactic embedding morphism from 2LTT syntax to psh model:

  G is given as (⌜⌝* ∘ yoneda) on the outer cwf part ("nerve")

    G (Γ : Con) : Set̂
    |G Γ|i := Sub ⌜i⌝ Γ

    G (σ : Sub Γ Δ) : GΓ → GΔ
    |G σ|ᵢ (γ : Sub ⌜i⌝ Γ) := σ ∘ γ

    G (A : Ty₁ Γ) : GΓ → Set̂
    |G A|ᵢ γ := Tm₁ ⌜i⌝ A[γ]

    G (t : Tm₁ Γ A) : (γ : GΓ) → GA γ
    |G t|ᵢ γ := t[γ]

  On the inner family (preserves all structure)

    G (A : Ty₀ Γ) : GΓ → Ty₀
    |G A|ᵢ γ = A[γ]

    G (t : Tm₀ Γ A) : (γ : GΓ) → Tm₀ (GA γ)
    |G t|ᵢ γ = t[γ]

  G preservation (outer preservation comes from HKS gluing)

    - ∙, _▶_, Σ, ⊤, extensional identity, weak

       G_∙  : G ∙         ≃ ⊤̂
       G_▶₁ : G (Γ ▶₁ A)  ≃ (γ : G Γ) × G A γ
       G_Σ  : G (Σ A B) γ ≃ (α : G A γ) × G B (G▶₁⁻¹(γ, α))
       G_⊤  : G ⊤ γ       ≃ ⊤̂

       Gp (G▶₁⁻¹(γ, α)) = γ
       Gq (G▶₁⁻¹(γ, α)) = α
       G(σ,t) γ         = G▶₁⁻¹(Gσ γ, Gt γ)

    - Π, U lax

      G_app : G (Π A B) γ → ((α : G A γ) → G B (G▶⁻¹(γ, α)))
      G_app (G (lam t) γ) α ≡ Gt G▶⁻¹(γ, α)


      G_code : G U γ → Set̂
      G_code (G(El a) γ) ≡ code (Ga γ) -- more precisely
                         ≡ Ga γ        -- with Russell notation

    - positive inductive types oplax

      G_ℕ : ℕ → G ℕ γ
      G_⊥ : ⊥ → G ⊥ γ

    - Action on Lift:

      (↓,↑) : G (Lift A) γ ≃ Tm₀ (G A γ)
      G (↑t) γ = ↑ (Gt γ)
      G (↓t) γ = ↓ (Gt γ)

    - Action on ▶₀
       |G(Γ ▶₀ A)|ᵢ = Sub₁ ⌜i⌝ (Γ ▶₀ A)
                    ≃ (σ : Sub₁ ⌜i⌝ Γ) × Tm₀ ⌜i⌝ A[σ]

       hence:

       G▶₀ : G(Γ ▶₀ A) ≃ (γ : G Γ) × Tm₀ (GA γ)

       Gp₀    (G▶₀⁻¹(γ, α)) = γ
       Gq₀    (G▶₀⁻¹(γ, α)) = α
       G(σ,t) γ             = G▶₀⁻¹(Gσ γ,Gt γ)


-- The relation
--------------------------------------------------------------------------------

- We work in the internal language of psh(B)
  We convert implicitly to the following style:
  - Con̂     --> Set̂                ("termification")
  - Tŷ Γ    --> (Γ → Set̂)
  - Sub̂ Γ Δ --> Γ → Δ → Set̂
  - Tm̂ Γ A  --> (γ : Γ) → A γ
- F goes into the psh model defined as above.
   F (Γ : Con)     : Set̂
   F (σ : Sub Γ Δ) : FΓ → FΔ
   F (A : Ty₁ Γ)   : FΓ → Set̂
   F (t : Tm₁ Γ A) : (γ : FΓ) → FA γ
   F (A : Ty₀ Γ)   : FΓ → TyB
   F (t : Tm₀ Γ A) : (γ : FΓ) → TmB (FA γ)


-- Cat + 2 fam structures
--------------------------------------------------------------------------------

Motives
  (Γ : Con)ᴿ     : FΓ → GΓ → Set̂
  (σ : Sub Γ Δ)ᴿ : Γᴿ γ γ' → Δᴿ (Fσ γ) (Gσ γ')
  (A : Ty₁ Γ)ᴿ   : Γᴿ γ γ' → FA γ → GA γ' → Set̂
  (t : Tm₁ Γ A)ᴿ : (γᴿ : Γᴿ γ γ') → Aᴿ γᴿ (Ft γ) (Gt γ')
  (A : Ty₀ Γ)ᴿ   : Γᴿ γ γ' → ⌜FA γ⌝ = GA γ'                   -- Ty₀ equations by UIP
  (t : Tm₀ Γ A)ᴿ : (γᴿ : Γᴿ γ γ') → ⌜Ft γ⌝ = Gt γ'            -- Tm₀ equations by UIP

Category
  idᴿ γᴿ          := γᴿ
  (σ ∘ δ)ᴿ γᴿ     := σᴿ (δᴿ γᴿ)
  ∙ᴿ _ _          := ⊤^

Outer family
  (Γ ▶₁ A)ᴿ (γ, α) (G▶₁⁻¹(γ', α')) := (γᴿ : Γᴿ γ γ') × Aᴿ γᴿ α α'
  (A[σ])ᴿ γᴿ α α' := Aᴿ (σᴿ γᴿ) α α'
  (t[σ])ᴿ γᴿ      := tᴿ (σᴿ γᴿ)
  (σ, t)ᴿ γᴿ      := (σᴿ γᴿ, tᴿ γᴿ)
  pᴿ (γᴿ, tᴿ)     := γᴿ
  qᴿ (γᴿ, tᴿ)     := tᴿ


Inner family
  (Γ ▶₀ A)ᴿ (γ, α) (G▶₀⁻¹(γ', α')) := (γᴿ : Γᴿ γ γ') × (⌜α⌝ = α')

     A   : Ty₀ Γ
     α   : TmB (FA γ)
     ⌜α⌝ : Tm₀ ⌜FA γ⌝
         : Tm₀ (GA γ')
     α'  : Tm₀ (GA γ')

  (A[σ])ᴿ γᴿ : ⌜F(A[σ]) γ⌝ = G(A[σ]) γ'
             : ⌜FA (Fσ γ)⌝ = GA (Gσ γ')
    by Aᴿ (σᴿ γᴿ)

  (t[σ])ᴿ γᴿ : ⌜Ft (Fσ γ)⌝ = Gt (Gσ γ')
    by tᴿ (σᴿ γᴿ)

  (σ,t)ᴿ γᴿ : (Δ ▶₀ A)ᴿ (F(σ,t) γ)   (G(σ,t) γ')
            : (Δ ▶₀ A)ᴿ (Fσ γ, Ft γ) (G▶₀⁻¹(Gσ γ', Gt γ'))
	    : (δᴿ : Δᴿ (Fσ γ) (Gσ γ')) × ⌜Ft γ⌝ = Gt γ'
	    := (σᴿ γᴿ, tᴿ γᴿ)

   p₀ᴿ (γᴿ, αᴿ) := γᴿ
   q₀ᴿ (γᴿ, αᴿ) := αᴿ


-- Lifting structure
--------------------------------------------------------------------------------

(Lift A)ᴿ : Γᴿ γ γ' → F (Lift A) γ → G(Lift A) γ' → Set̂
          : Γᴿ γ γ' → TmB (FA γ) → G (Lift A) γ' → Set̂
          := λ γᴿ t t'. ⌜t⌝ = ↓t'

(↑t)ᴿ : (γᴿ : Γᴿ γ γ') → (Lift A)ᴿ γᴿ (F(↑t) γ) (G(↑t) γ')
      : (γᴿ : Γᴿ γ γ') → ⌜F(↑t) γ⌝ = ↓ (G(↑t) γ')
      : (γᴿ : Γᴿ γ γ') → ⌜Ft γ⌝ = Gt γ'
  by tᴿ γᴿ

(↓t)ᴿ : (γᴿ : Γᴿ γ γ') → ⌜F(↓t) γ⌝ = G(↓t) γ'
      : (γᴿ : Γᴿ γ γ') → ⌜Ft γ⌝ = ↓(Gt γ')

  by tᴿ γᴿ

-- Outer types
--------------------------------------------------------------------------------

⊥ᴿ γᴿ : F⊥ γ → G⊥ γ' → Set̂
      : ⊥̂  → G⊥ γ' → Set̂
  vacuous

⊤ᴿ γᴿ : ⊤^ → G⊤ γ' → Set̂
 ⊤ᴿ γᴿ t t' := ⊤^

ttᴿ γᴿ := tt

(Σ A B)ᴿ γᴿ : ((α : FA γ) × FB (γ, α)) → G(Σ A B) γ' → Set̂
  (Σ A B)ᴿ γᴿ (α, β) (GΣ⁻¹(α', β')) := (αᴿ : Aᴿ γᴿ α α') × Bᴿ (γᴿ, αᴿ) β β'

  -- pairing & proj obvious

(Π A B)ᴿ γᴿ : ((α : FA γ) → FB (γ, α)) → G(Π A B) γ' → Set̂
  (Π A B)ᴿ γᴿ t t' :=
    (α : FA γ)(α' : GA γ')(αᴿ : Aᴿ γᴿ α α') → Bᴿ (γᴿ, αᴿ) (t α) (G_app t' α')

(lam t)ᴿ γᴿ : (Π A B)ᴿ γᴿ (F(lam t) γ) (G(lam t) γ')
            : ∀ α α' (αᴿ : Aᴿ γᴿ α α') → Bᴿ (γᴿ, αᴿ) (Ft (γ, α)) (G_app (G(lam t) γ') α')
	    : ∀ α α' (αᴿ : Aᴿ γᴿ α α') → Bᴿ (γᴿ, αᴿ) (Ft (γ, α)) (Gt G▶₁⁻¹(γ', α'))
	    := λ α α' αᴿ. tᴿ (γᴿ, αᴿ) (Ft (γ, α)) (Gt G▶₁⁻¹(γ', α))


ℕᴿ γᴿ : ℕ^ → G ℕ γ' → Set̂
  ℕᴿ γᴿ t t' := (G_ℕ t = t')

zeroᴿ γᴿ : G_ℕ zerô =


-- Inner types
--------------------------------------------------------------------------------

Bool₀ᴿ : Γᴿ γ γ' → ⌜F Bool₀ γ ⌝ = G Bool₀ γ'
       : Γᴿ γ γ' → Bool₀ = Bool₀ OK

true₀ᴿ γᴿ : ⌜F true₀ γ⌝ = G true₀ γ'
          : true₀ = true₀ OK

false₀ᴿ γᴿ ...

BoolElim₀ᴿ γᴿ : ⌜F (BoolElim₀ B t f b) γ⌝ = G (BoolElim₀ B t f b) γ'
       BoolElim₀ (⌜F B⌝ γ) (⌜F t⌝ γ) (⌜F f⌝ γ) (⌜F b⌝ γ)
     = BoolElim₀ (G B γ') ....
     OK

etc...


-- General soundness
--------------------------------------------------------------------------------

-- externalizing ᴿ:

  for (Γ : Con)
    |Γᴿ| : |F Γ|i → Sub ⌜i⌝ Γ → Set

  for (A : Ty₀ Γ)
    |Aᴿ| : |Γᴿ| γ γ' → ⌜FA γ⌝ = A[γ']

  for (t : Tm₀ Γ A)
    |tᴿ| : (γᴿ : |Γᴿ| γ γ') → ⌜Ft γ⌝ = t[γ']

-- soundness of generic contexts

(Γ : ConB)ᴾᴿ : |Γᴿ| Γᴾ (id : Sub ⌜Γ⌝ ⌜Γ⌝)

∙ᴾᴿ : ⊤
    := tt

(Γ ▶ A)ᴾᴿ : |(Γ▶A)ᴿ| (Γ▶A)ᴾ     id
          : |(Γ▶A)ᴿ| (Γᴾ[p], q) (p, q)
	  : (γᴿ : |Γ|ᴿ (Γᴾ[p]) p) × (⌜q⌝ = q)

  Γᴾᴿ : |Γᴿ| Γᴾ id   -- by stability of Γᴿ

  Γᴾᴿ[p] : |Γ|ᴿ Γᴾ[p] id∘p
         : OK


--
--------------------------------------------------------------------------------


to show:

  ⌜Stage A⌝  = A
  ⌜|F A| Γᴾ⌝ = A

    |Aᴿ| Γᴾᴿ : ⌜|F A| Γᴾ⌝ = A[id] = A OK

  ⌜Stage t⌝ = t
  ⌜|F t| Γᴾ⌝ = t

    |tᴿ| Γᴾᴿ :  ⌜|F t| Γᴾ⌝ = t[id] = t OK

thus
  TyB Γ ≃ Ty₀ ⌜Γ⌝
  TmB Γ A ≃ Tm₀ ⌜Γ⌝ ⌜A⌝
