

-- Gen : U → U
--    = λ A. {R : U} → (A → □ R) → □ R;

-- ret : {A} → A → Gen A
--   = λ a k. k a;

-- bind : {A B} → Gen A → (A → Gen B) → Gen B
--   = λ ga f k. ga λ a. (f a) k;

-- runGen : {A} → Gen (□ A) → □ A
--   = λ ga. ga (λ x. x);

-- ℕ : U = (N : U) → (N → N) → N → N;

-- id  : □ (ℕ → ℕ) = <λ x. x>;
-- id2 : □ (ℕ → ℕ) = <λ x. ~(let y = ~id x; <y>)>;

ℕ : U
   = (N : U) → (N → N) → N → N;

zero : ℕ =
  λ _ s z. z;

suc : ℕ → ℕ =
  λ n N s z. s (n N s z);

add : ℕ → ℕ → ℕ
  = λ a b N s z. a N s (b N s z);

mul : ℕ → ℕ → ℕ
  = λ a b N s z. a N (b N s) z;

n0   = zero;
n1   = suc zero;
n2   = suc $ suc zero;
n3   = suc $ suc $ suc zero;
n5   = suc $ suc $ suc $ suc $ suc zero;
n10  = add n5 n5;
n100 = mul n10 n10;
n1k  = mul n100 n10;
n10k = mul n100 n100;

-- serializeℕ : ℕ → □ ℕ =
--   λ n. <λ N s z. ~(let x = n N s z; <x>)>;

serializeℕ : ℕ → □ ℕ =
  λ n. <λ N s z. ~(n _ (λ x. <s ~x>) <z>)>;

foo = ~(serializeℕ (λ N s z. s (s (s z))));

-- foo = ~(serializeℕ (λ N s z. z));

-- kek = ~(serializeℕ (add zero zero));

-- bleh = λ z.
--   let x = zero;
--   let y = zero;
--   add x (add y zero);

-- foo = <<<bleh>>>;

-- bar = ~foo;

-- One = (O : U) → O → O;

-- ser : One → □ One =
--   λ o. <λ O x. ~(o _ <x>)>;

-- foo = ~(ser (λ _ x. x));

-- Bool = (B : U) → B → B → B;

-- ser : Bool → □ Bool =
--   λ b. <λ B t f. ~(b _ <t> <f>)>;

-- foo = ~(ser (λ _ t f. t));

return foo

-- mkExp : ℕ → □ (ℕ → ℕ)
--   = λ x. <λ y. ~(x _ (λ f. <mul ~f y>) <n1>)>;

-- -- exp5 = ~(mkExp n5);
-- return <λ (x : ℕ). suc x>


-- let List : U → U =
--   λ A. (L : U) → (A → L → L) → L → L;

-- let nil : {A} → List A =
--   λ L c n. n;

-- let cons : {A} → A → List A → List A =
--   λ a as L c n. c a (as L c n);

-- do ref ← new (nil {⊤});

-- let id : {A} → □ A → □ A =
--   λ x. x;

-- let majom : Eff (⊤ → ⊤) =
--   do x ← return (λ (y : ⊤). y);
--   let kek =
--     let bar =
--       (λ (y : ⊤). y);
--     bar;
--   return kek;

-- return id

-- return (cons tt (cons tt (cons tt nil)))
