
-- Prelude
--------------------------------------------------------------------------------

the (A : U) (x : A) = x;

id : {A} → A → A
  = λ x. x;

const : {A B} → A → B → A
  = λ x y. x;

comp : {A B C} → (B → C) → (A → B) → A → C
  = λ f g x. f (g x);

modify : {A} → Ref A → (A → A) → Eff ⊤
  = λ r f. do a ← read r; write r (f a);

--------------------------------------------------------------------------------

Gen (A : U) : U =
  {R} → (A → □ R) → □ R;

ret : {A} → A → Gen A
  = λ a k. k a;

bind : {A B} → Gen A → (A → Gen B) → Gen B
  = λ ga f k. ga λ a. (f a) k;

runGen : {A} → Gen (□ A) → □ A
  = λ ga. ga (λ x. x);

--------------------------------------------------------------------------------

ℕ : U
   = (N : U) → (N → N) → N → N;

zero  : ℕ = λ _ s z. z;
suc   : ℕ → ℕ = λ n N s z. s (n N s z);

iter  : {A} → ℕ → (A → A) → A → A
  = λ n s z. n _ s z;

add : ℕ → ℕ → ℕ
  = λ a b N s z. a N s (b N s z);

mul : ℕ → ℕ → ℕ
  = λ a b N s z. a N (b N s) z;

n0   = zero;
n1   = suc zero;
n2   = suc $ suc zero;
n3   = suc $ suc $ suc zero;
n5   = suc $ suc $ suc $ suc $ suc zero;
n10  = add n5 n5;
n100 = mul n10 n10;
n1k  = mul n100 n10;
n10k = mul n100 n100;

mkExp : ℕ → □ (ℕ → ℕ)
  = λ x. <λ y. ~(x _ (λ f. <mul ~f y>) <n1>)>;

exp5 = ~(mkExp n1);

--------------------------------------------------------------------------------

Bool
  = (B : U) → B → B → B;

true  : Bool = λ B t f. t;
false : Bool = λ B t f. f;

case : {B} → Bool → B → B → B
  = λ {B} b. b B;

not : Bool → Bool
  = λ b B t f. b B f t;

and : Bool → Bool → Bool
  = λ x y B t f. x B (y B t f) f;

or : Bool → Bool → Bool
  = λ x y B t f. x B t (y B t f);

splitBool : {A} → □ Bool → Gen A → Gen A → Gen A
  = λ b t f k. <~b _ ~(t k) ~(f k)>;

--------------------------------------------------------------------------------

List  : U → U
  = λ A. (L : U) → (A → L → L) → L → L;

nil  : {A} → List A = λ L c n. n;
cons : {A} → A → List A → List A = λ a as L c n. c a (as L c n);

foldr : {A B} → (A → B → B) → B → List A → B
  = λ c n as. as _ c n;

--------------------------------------------------------------------------------

Pair : U → U → U
  = λ A B. (P : U) → (A → B → P) → P;

pair : {A B} → A → B → Pair A B
  = λ a b P p. p a b;

fst : {A B} → Pair A B → A
  = λ ab. ab _ (λ a b. a);

snd : {A B} → Pair A B → B
  = λ ab. ab _ (λ a b. b);


-- Foldr fusion
--------------------------------------------------------------------------------



Push (A : U) = (L : U) → (A → □ L → □ L) → □ L → □ L;

map : {A B} → (A → B) → Push A → Push B
  = λ f as L c n. as L (λ a b. c (f a) b) n;

filter : {A} → (A → Gen Bool) → Push A → Push A
  = λ f as L c n. as L (λ a l. runGen $ bind (f a) λ b. b _ (ret (c a l)) (ret l)) n;

pushList {A} (as : □ (List A)) : Push (□ A)
  = λ L c n. <foldr (λ a l. ~(c <a> <l>)) ~n ~as>;

unpushList {A} (as : Push (□ A)) : □ (List A)
  = as _ (λ a as. <cons ~a ~as>) <nil>;

upBool : Bool → Gen Bool
  = λ b {R} k. <_>;

example : List ℕ → List ℕ
  = ~<λ ns. ~(unpushList $
         map    (λ n. <add n10 ~n>) $
         map    (λ n. <add n10 ~n>) $
         filter (λ _. ret true)     $
         map    (λ n. <add n10 ~n>) $
         pushList <ns>)>;

example' : List ℕ → List ℕ
  = ~<λ ns. ~(unpushList $
         map    (λ n. <add n10 ~n>) $
         map    (λ n. <add n10 ~n>) $
         filter (λ _. ret true)     $
         map    (λ n. <add n10 ~n>) $
         pushList <ns>)>;

--------------------------------------------------------------------------------



-- main : Eff ℕ
--   = do r ← new zero;
--     do action  ← test r;
--     -- do action' ← test' r;
--     do ~action;
--     -- do ~action';
--     do x ← read r;
--     return x;

-- id {A}(x : A) = x;

-- foo {A} (act : Eff A) : Eff A =
--   do act;
--   do act;
--   do res ← act;
--   return res;

-- do ref ← new (λ x y. x);
-- do write ref (λ x y. y);

-- lel : {A B} → (A → B) → A → B =
--   λ f x. f x;

-- do ref ← new (λ (x : ℕ)(y : ℕ). x);
-- let action = <do write ref (λ x y. suc y); read ref>;
-- do f ← ~action;
-- let kek = ~<λ x y. ~(let res = f x y; <res>)>;
-- let heh = ~<λ x y. ~(let res = kek x y; <res>)>;

return tt
