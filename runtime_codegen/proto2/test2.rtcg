
-- Prelude
--------------------------------------------------------------------------------

the (A : U) (x : A) = x;

id {A} (x : A) = x;

const {A B}(x : A)(_ : B) = x;

comp {A B C}(f : B → C)(g : A → B)(a : A) : C =
  f (g a);

modifyRef {A} (r : Ref A) (f : A → A) : Eff Σ() =
  do a ← read r;
  write r (f a);

Eq {A}(x y : A) = (P : A → U) → P x → P y;
refl {A}{x : A} : Eq x x = λ _ px. px;

Bool = (B : U) → B → B → B;
true  : Bool = λ _ t f. t;
false : Bool = λ _ t f. f;

--------------------------------------------------------------------------------

Monad (M : U → U) = Σ(
    ret  : {A} → A → M A
  , bind : {A B} → M A → (A → M B) → M B
);

MonadId : Monad (λ A. A) = (
    ret  = λ x. x
  , bind = λ a f. f a
);

--------------------------------------------------------------------------------

Gen (A : U) : U =
  {R} → (A → □ R) → □ R;

MonadGen : Monad Gen = (
    ret = λ a k. k a
  , bind = λ ga f k. ga λ a. (f a) k
);

runGen : {A} → Gen (□ A) → □ A
  = λ ga. ga (λ x. x);

gen : {A} → □ A → Gen (□ A) =
  λ a k. <let x = ~a; ~(k <x>)>;

--------------------------------------------------------------------------------

iter {A} (n : ℕ)(s : ℕ → A → A)(z : A) : A =
  ℕElim (λ {n}. s n) z n;

caseℕ {A}(n : ℕ) (s : ℕ → A) (z : A) : A =
  iter n (λ n _. s n) z;

add m n = iter m (λ _. suc) n;
mul m n = iter m (λ _. add n) 0;

test : ℕ → ℕ =
  λ x.  let m : ℕ = _;
        let p : Eq (caseℕ x (λ _. 0) 0) (caseℕ m (λ _. 0) 0) = refl;
	x;

uhh : Gen (□ ℕ) =
  open MonadGen;
  bind (gen <10>) λ x.
  bind (gen <20>) λ y.
  ret <add ~x ~y>;

tesst : □ ℕ =
  <open MonadGen; ~(runGen $ ret <100>)>;



-- mul (m n : ℕ) =

-- add : ℕ → ℕ → ℕ
--   = λ a b N s z. a N s (b N s z);

-- mul : ℕ → ℕ → ℕ
--   = λ a b N s z. a N (b N s) z;

-- n0   = zero;
-- n1   = suc zero;
-- n2   = suc $ suc zero;
-- n3   = suc $ suc $ suc zero;
-- n5   = suc $ suc $ suc $ suc $ suc zero;
-- n10  = add n5 n5;
-- n100 = mul n10 n10;
-- n1k  = mul n100 n10;
-- n10k = mul n100 n100;

-- mkExp : ℕ → □ (ℕ → ℕ)
--   = λ x. <λ y. ~(x _ (λ f. <mul ~f y>) <n1>)>;

-- exp5 = ~(mkExp n5);

-- --------------------------------------------------------------------------------

-- Bool
--   = (B : U) → B → B → B;

-- true  : Bool = λ B t f. t;
-- false : Bool = λ B t f. f;

-- case : {B} → Bool → B → B → B
--   = λ {B} b. b B;

-- not : Bool → Bool
--   = λ b B t f. b B f t;

-- and : Bool → Bool → Bool
--   = λ x y B t f. x B (y B t f) f;

-- or : Bool → Bool → Bool
--   = λ x y B t f. x B t (y B t f);

-- splitBool : {A} → □ Bool → Gen A → Gen A → Gen A
--   = λ b t f k. <~b _ ~(t k) ~(f k)>;

-- --------------------------------------------------------------------------------

-- List  : U → U
--   = λ A. (L : U) → (A → L → L) → L → L;

-- nil  : {A} → List A = λ L c n. n;
-- cons : {A} → A → List A → List A = λ a as L c n. c a (as L c n);

-- foldr : {A B} → (A → B → B) → B → List A → B
--   = λ c n as. as _ c n;

-- --------------------------------------------------------------------------------

-- Pair : U → U → U
--   = λ A B. (P : U) → (A → B → P) → P;

-- pair : {A B} → A → B → Pair A B
--   = λ a b P p. p a b;

-- fst : {A B} → Pair A B → A
--   = λ ab. ab _ (λ a b. a);

-- snd : {A B} → Pair A B → B
--   = λ ab. ab _ (λ a b. b);


-- -- Foldr fusion
-- --------------------------------------------------------------------------------



-- Push (A : U) = (L : U) → (A → □ L → □ L) → □ L → □ L;

-- map : {A B} → (A → B) → Push A → Push B
--   = λ f as L c n. as L (λ a b. c (f a) b) n;

-- filter : {A} → (A → Gen Bool) → Push A → Push A
--   = λ f as L c n. as L (λ a l. runGen $ bind (f a) λ b. b _ (ret (c a l)) (ret l)) n;

-- pushList {A} (as : □ (List A)) : Push (□ A)
--   = λ L c n. <foldr (λ a l. ~(c <a> <l>)) ~n ~as>;

-- unpushList {A} (as : Push (□ A)) : □ (List A)
--   = as _ (λ a as. <cons ~a ~as>) <nil>;

-- example : List ℕ → List ℕ
--   = ~<λ ns. ~(unpushList $
--          map    (λ n. <add n10 ~n>) $
--          map    (λ n. <add n10 ~n>) $
--          filter (λ _. ret true)     $
--          map    (λ n. <add n10 ~n>) $
--          pushList <ns>)>;

-- --------------------------------------------------------------------------------



-- -- main : Eff ℕ
-- --   = do r ← new zero;
-- --     do action  ← test r;
-- --     -- do action' ← test' r;
-- --     do ~action;
-- --     -- do ~action';
-- --     do x ← read r;
-- --     return x;

-- -- id {A}(x : A) = x;

-- -- foo {A} (act : Eff A) : Eff A =
-- --   do act;
-- --   do act;
-- --   do res ← act;
-- --   return res;

-- -- do ref ← new (λ x y. x);
-- -- do write ref (λ x y. y);

-- -- lel : {A B} → (A → B) → A → B =
-- --   λ f x. f x;

-- -- do ref ← new (λ (x : ℕ)(y : ℕ). x);
-- -- let action = <do write ref (λ x y. suc y); read ref>;
-- -- do f ← ~action;
-- -- let kek = ~<λ x y. ~(let res = f x y; <res>)>;
-- -- let heh = ~<λ x y. ~(let res = kek x y; <res>)>;

return ()
