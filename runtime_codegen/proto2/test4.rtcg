
id {A}(x : A) = x;
const {A B}(x : A)(y : B) = x;
comp {A B C}(f : B → C)(g : A → B)(a : A) = f (g a);

iter {A} (n : ℕ) (f : ℕ → A → A) (a : A) =
  ℕElim (λ {n} a. f n a) a n;

add (n m : ℕ) : ℕ = iter n (λ _. suc) m;
mul (n m : ℕ) : ℕ = iter n (λ _. add m) 0;

Pair A B = Σ(fst : A, snd : B);

Functor (F : U → U) = Σ(
  map : {A B} → (A → B) → F A → F B
);

Monad (M : U → U) = Σ(
    ret  : {A} → A → M A
  , bind : {A B} → M A → (A → M B) → M B
);

Gen (A : U) : U =
  {R} → (A → □ R) → □ R;

MonadGen : Monad Gen = (
    ret  = λ a k. k a
  , bind = λ ga f k. ga λ a. (f a) k
);

runGen : {A} → Gen (□ A) → □ A
  = λ ga. ga (λ x. x);

gen : {A} → □ A → Gen (□ A) =
  λ a k. <let x = ~a; ~(k <x>)>;

Eq {A}(x y : A) =
  (P : A → U) → P x → P y;

refl {A}{x : A} : Eq x x =
  λ _ px. px;

Vec (n : ℕ) A : U =
  iter n (λ _ B. Pair A B) Σ();

vnil {A} : Vec 0 A = ();
vcons {A n} (a : A)(as : Vec n A) : Vec (suc n) A = (a, as);

vfoldl {A : U}(B : ℕ → U) (f : {n} → B n → A → B (suc n))(z : B 0){n}(as : Vec n A) : B n
  = ℕElim
      {λ n. (B : ℕ → U) → ({n} → B n → A → B (suc n)) → B 0 → Vec n A → B n}
      (λ {n} rec B f z as. rec (λ x. B (suc x)) f (f z as.fst) as.snd)
      (λ B f z as. z)
      n B f z as;

vfoldr {A  : U}
       (B  : ℕ → U)
       (f  : {n} → □ (Vec (suc n) A) → □ A → □ (B n) → □ (B (suc n)))
       (z  : □ (B 0))
       {n  : ℕ}
       (as : □ (Vec n A))
     : □ (B n)
  = < ℕElim
        {λ n. Vec n A → B n}
        (λ {n} rec as. ~(f <as> <as.fst> <rec as.snd>))
        (λ _. ~z)
        n ~as
    >;

vfoldr' {A  : U}
        (B  : ℕ → U)
        (f  : {n} → Vec (suc n) A → A → B n → B (suc n))
        (z  : B 0)
        {n  : ℕ}
        (as : Vec n A)
       : B n
  = ℕElim
        {λ n. Vec n A → B n}
        (λ {n} rec as. f as as.fst (rec as.snd))
        (λ _. z)
        n as;

vappend : {n m A}(xs : Vec n A)(ys : Vec m A) → Vec (add n m) A =
  ~<λ {n}{m}{A} xs ys.
     ~(vfoldr (λ n. Vec (add n m) A) (λ _ a as. <(~a, ~as)>) <ys> <xs>)>;

List A = Σ(length: ℕ, data: Vec length A);
Builder A = Σ(length: ℕ, data : □ (Vec length A));

build {A} (as : Builder A) : □ (List A) =
  <as.length, ~(as.data)>;

cons {A}(a : □ A)(as : Builder A) : Builder A =
  (suc as.length, <~a, ~(as.data)>);

nil {A} : Builder A =
  (0, <()>);

vecToList {n A}(as : Vec n A) : List A =
  (length = n, data = as);

foldr {A B} (f : □ (List A) → □ A → □ B → □ B) (b : □ B)(as : □ (List A)) : □ B =
  vfoldr (λ _. B) (λ {n} as a b. f <(suc n, ~as)> a b) b <~as.data>;

map {A B}(f : □ A → □ B)(as : □ (List A)) : □ (List B) =
  foldr (λ _ a bs. <(suc ~bs.length, (~(f a), ~bs.data))>) <(0, ())> as;

foldr' {A B} (f : List A → A → B → B) (b : B)(as : List A) : B =
  vfoldr' (λ _. B) (λ {n} as a b. f (suc n, as) a b) b as.data;

sum : List ℕ → ℕ =
  ~<λ ns. ~(foldr (λ _ n acc. <add ~n ~acc>) <0> <ns>)>;

normalizeFun {A : U}{B : A → U}(f : (x : A) → B x) : □ ((x : A) → B x) =
  <λ a. ~(let b : B a = f a; <b>)>;

bloo = ~(normalizeFun {ℕ → ℕ}{λ _. ℕ → _}(λ (f : ℕ → ℕ) (x : ℕ). let g = f; g (g (g x))));

sum' : List ℕ → ℕ = ~(normalizeFun (foldr' (λ _. add) 0));


readTest : Eff ℕ =
  do n ← readℕ;
  do log "mallac";
  return n;

blabar : Σ(x : ℕ, y : ℕ, z : ℕ) → ℕ = ~<λ foo. add foo.x (add foo.y foo.z)>;

return ()
