
Christian's version rephrased inductively

_▶_  : (C : Cat) → Fib C → Cat
Disc : PSh C → Fib C

data Tree (C : Cat) where
  node : (Γ : PSh C)
         (n : ℕ)
         (D : Fin n → Fib (C ▶ Disc Γ))
         (f : (i : Fin n) → Tree (C ▶ Disc Γ ▶ D i))
       → Tree C

-- reindex Tree, assuming F discrete fibration
(t : Tree C) [F : D → C] : Tree D

-- C~ is discrete fibration
data Hom (C~ : C → C') (node Γ n D f : Tree C) (node Γ' n' D' f' : Tree C') where
  node~ :
    (Γ~ : Tm (C ▶ El Γ) (El Γ'[C~ ∘ p]))
    (n~ : Fin n' → Fin n)
    (D~ : ∀ i. D (n~ i) = (D' i)[C~ ∘ p, Γ~])
    (f~ : ∀ i. Hom (C~ ∘ p², Γ~[p], q) (f (n~ i)) (f' i))
    → Hom C~ (node Γ n D f) (node Γ' n' D' f')

-- homogeneous Hom

data Hom (node Γ n D f : Tree C) (node Γ' n' D' f' : Tree C) where
  node~ :
    Γ~ : Tm (C ▶ Disc Γ) (Disc Γ'[p])
    n~ : Fin n' → Fin n
    D~ : ∀ i. D (n~ i) = (D' i)[p, Γ~]

              D (n~ i) : Fib (C ▶ Disc Γ)
              D' i     : Fib (C ▶ Disc Γ')

              f (n~ i) : Fib (C ▶ Disc Γ  ▶ (D' i)[p, Γ~])
              f' i     : Fib (C ▶ Disc Γ' ▶ D' i)

    f~ : ∀ i. Hom (f (n~ i)) ((f' i)[p², Γ~[p], q])

subtree relation:

  _<_ : Tree C → Tree C' → Set
  t < node Γ' n' D' f' = (i : Fin n') × (t <= f' i)

  _<=_ : Tree C → Tree C' → Set
  t <= t' : ((C = C') × (t = t')) + (t < t')


Con := Tree 1
Sub Γ Δ := Hom id Γ Δ
∙ := node ⊤ 0 _ _

Base : Con → Set
Base Γ := (C : Cat) × (Γ' : Tree C) × (Γ' <= Γ)

-- + subst for Base

1 : Base Γ
1 := Γ as a subtree of Γ

PSh (Γ : Con) (i : Base Γ) : Set
  from i we get: (node Γ' n D f : Tree C) is a subtree of Γ
  := PSh (C ▶ Disc Γ')

-- + substitution

El (Γ : Con) (i : Base Γ)(A : PSh Γ i) : Set
  := Section of A

-- + substitution
extension
Γ ▶ (A : PSh Γ i) :=
  add A to Γ' in i, weaken rest of stuff in that node

p : Sub (Γ ▶ A) Γ
q : El (Γ ▶ A) A[p]

Var Γ (i : Base Γ) (C : El Γ Catᵢ) : Set
  := <there's an immediate subtree of i labelled with C as the (D i) fibration>

var : Var Γ i C → Base Γ
    := get the subtree from Var

Γ ▶ (j : Var Γ i C) :=
  insert C and (node 1 0 _ _) as new subtree at i


SYNTAX
----------------------------------------------------------------------------------------------------

MetaTy                  -- supports ETT
Base : MetaTy
1    : Base

PSh  : Base → MetaTy    -- supports ETT
El   : PSh i → MetaTy

Var  : {i : Base} → El Catᵢ → MetaTy
var  : Var C → Base

+ Yoneda embeddings
+ Lift (where we can only compute in the external-internal direction)



TRUNCATED VERSION
----------------------------------------------------------------------------------------------------

MetaTy                     -- has ETT

Set : MetaTy               -- has ETT
El  : Set → MetaTy

Var : El Catₛₑₜ → MetaTy

PSh : Var C → MetaTy       -- has ETT
El  : PSh i → MetaTy

+ Yoneda
+ Set→PSh Lift

----------------------------------------------------------------------------------------------------

Con : Set
Con :=
  Γ : Set
  n : ℕ
  C : Fin n → Γ → Cat
  Δ : ∀ i γ. PSh (C i γ)

Sub : Con → Con → Set
Sub (Γ, n, C, Δ) (Γ', n', C', Δ') :=
  Γ~ : Γ → Γ'
  n~ : Fin n' → Fin n
  C~ : ∀ i γ. C (n~ i) γ = C' i (Γ~ γ)
  Δ~ : ∀ i γ. Δ (n~ i) γ → Δ' i (Γ~ γ)

-- I view (Fin n → A) as (Vec n A), and use "nil", "cons", "head", "tail" and "map"
-- for it.

-- sort of sets
TyS : Con → Set
TyS (Γ, _, _, _) = Γ → Set

TmS : (Γ : Con) → TyS Γ → Set
TmS (Γ, _, _, _) A = (γ : Γ) → A γ

_▶_ : (Γ : Con) → TyS Γ → Con
(Γ, n, C, Δ) ▶ A = (Σ Γ A, n, (λ i. C i ∘ fst), (λ i. Δ i ∘ fst))

-- category variables
In : (Γ : Con) → TmS Γ CatS → Set
In (Γ, n, C, Δ) (D : Γ → Cat) := (i : Fin n) × (C i = D)

_▶_ : (Γ : Con) → TmS Γ CatS → Con
(Γ, n, C, Δ) ▶ D := (Γ, suc n, cons D C, cons (λ γ. ⊤) Δ)

  p : Sub (Γ ▶ D) Γ
    := <take tail of C, Δ>

  q : Var (Γ ▶ D) D[p]
    := (zero : Fin (suc n))

  (σ : Sub (Γ,n,C,D) (Γ',n',C',D')) , (i : Var Γ E[σ]) : Sub (Γ,n,C,D) (Γ', suc n', cons E C', cons (λ _. ⊤) D'))

    Γ~ := σ.Γ~
    n~ := cons i σ.n~
    C~ := OK
    Δ~ := cons (λ _. tt) σ.Δ~

  OK


PSh (Γ, n, C, Δ) (i : Var Γ C) :=
 (γ : Γ) → DispPSh (Δ i γ)

 or
 ∀ γ → C.Tm (C i γ ▶ Disc (D i γ)) Setᵒᵖ

El (Γ, n, C, Δ) (A : PSh (Γ, n, C, Δ) i) :=
  (γ : Γ) → Section (A γ)

(Γ, n, C, Δ) ▶ (A : PSh _ i) :=
  (Γ, n, C, (λ j. if j = i then (λ γ. (Δ i γ ▶ A γ)) else Δ j))

p, q, _,_ are inherited from the variable-i position in the PSh context Δ:

  p : Sub (Γ ▶ A) Γ
    := <first projection of PSh at index i>

  q : PSh (Γ ▶ A) A[p]
    := <second projection of PSh at index i>

  _,_ := <pairing of PSh at index i>


------------------------------------------------------------

↑ : TmS Γ A → TmP Γ (Lift A) OK
TmP Γ (Lift A) → TmS Γ A NOT OK

-- oplax for simple ind types
-- oplax for simply-typed function

Christian mail
----------------------------------------------------------------------------------------------------

Let's check externalization of Nat first

ext : ((j : In C) → El ℕⱼ) → (El C.Ob → El ℕₛₑₜ)

ext : El (Γ ▶ (j : In C)) ℕⱼ → El (Γ ▶ D.Obj) ℕ₁

ext (n : El ((Γ,n,C,Δ) ▶ D) ℕⱼ) (γ : Γ)(d : (D γ).Obj) : ℕ

  n γ : D γ × 1 → ℕ

  ext n γ d := n γ (d, tt) OK

stability:

(ext n)[σ] = ext (n[σ∘p, q])


--------------------------------------------------------------------------------



Con : Set
Con :=
  Γ : Set
  n : ℕ
  C : Fin n → Γ → Cat
  Δ : ∀ i γ. PSh (C i γ)

Sub : Con → Con → Set
Sub (Γ, n, C, Δ) (Γ', n', C', Δ') :=
  Γ~ : Γ → Γ'
  n~ : Fin n' → Fin n
  C~ : ∀ i γ. C (n~ i) γ = C' i (Γ~ γ)
  Δ~ : ∀ i γ. Δ (n~ i) γ → Δ' i (Γ~ γ)

Sort of sets
------------------------------------------------------------

TyS : Con → Set
TyS (Γ, _, _, _) = Γ → Set

TmS : (Γ : Con) → TyS Γ → Set
TmS (Γ, _, _, _) A = (γ : Γ) → A γ

_▶_ : (Γ : Con) → TyS Γ → Con
(Γ, n, C, Δ) ▶ A = (Σ Γ A, n, (λ i. C i ∘ fst), (λ i. Δ i ∘ fst))


Category variables
------------------------------------------------------------
In : (Γ : Con) → TmS Γ CatS → Set
In (Γ, n, C, Δ) (D : Γ → Cat) := (i : Fin n) × (C i = D)

_▶_ : (Γ : Con) → TmS Γ CatS → Con
(Γ, n, C, Δ) ▶ D := (Γ, suc n, cons D C, cons (λ γ. ⊤) Δ)

-- (using "cons" for (Fin n → A) as if for (Vec n A))


Sort of presheaves
------------------------------------------------------------
TyP : (Γ : Con) → In Γ C → Set
TyP (Γ, n, C, Δ) i := (γ : Γ) → DispPSh (Δ i γ)

-- TyP substitution
(A : TyP (Γ', n', C', Δ') i) [ Γ~, n~, C~, Δ~] : TyP (Γ, n, C, Δ) (n~ i)

  goal : (γ : Γ ) → DispPSh (Δ (n~ i) γ))
    C~             : C (n~ i) γ = C' i (Γ~ γ)
    A (Γ~ γ)       : DispPSh (Δ' i (Γ~ γ))
    (A (Γ~ γ))[Δ'] : DispPSh (Δ (n~ i) γ))

  A[Γ~, n~, C~, Δ~] γ := (A (Γ~ γ))[Δ']


TmP : (Γ : Con) → TyP Γ i → Set
TmP (Γ, n, C, Δ) A := (γ : Γ) → Section (A γ)

_▶_ : (Γ : Con) → TyP Γ i → Con
(Γ, n, C, Δ) ▶ A :=
  (Γ, n, C, (λ j. if j = i then (λ γ. (Δ i γ ▶ A γ)) else Δ j))


Externalization for TyP
------------------------------------------------------------

In SOGATs

  ext : ((i : In C) → TyP i) → TmS (PShS C)

In GATs:

  ext : TyP (Γ ▶ C) q → TmS Γ (PshS C)

Let's unfold more.

D : Γ → Cat
i : Fin n
_ : C i = D

ext (A : TyP ((Γ, n, C, Δ) ▶ D) q) (γ : Γ) : PSh (D γ)

  A : (γ : Γ) → DispPSh (cons (λ _. ⊤) Δ zero γ)  -- since (q : Fin (suc n)) = zero
    : (γ : Γ) → DispPSh ⊤

  hence
  A γ : PSh (D γ × 1)
  (id, tt) : D γ → (D γ × 1)

  ext A γ := A γ ∘ (id, tt)


stability under substitution:

(ext A)[σ] = ext (A[σ∘p, q])

  let (Γ~ : Γ → Γ', n~ : Fin n' → Fin n, C~ : _, Δ~ : _) := σ

  (ext A)[σ] γ
    = (ext A) (Γ~ γ)
    = A (Γ~ γ) ∘ (id, tt)

  A : (γ : Γ') → DispPSh (Δ' i γ)

  A[σ∘p, q] γ = A (γ~ Γ)

  (ext A[σ∘p, q]) γ

  (A (Γ~ γ))[


















------------------------------------------------------------
