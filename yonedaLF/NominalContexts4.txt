
Goal: "nominal" notation for internal first-order models of SOGATs, where we don't have to ever
write de Bruijn indices and cwf combinators. The notation should be complete in the sense that all
constructions that are possible with sugar-free first-order models are possible.

Let's start with an "intended model" of the notation, and then try to glean a sensible syntax from it.

We work in an ETT with M being an internal model of some TT.

We can define the standard presheaf model of a 2LTT over M. We write Con̂, Tŷ, Tm̂, and Sub̂ for the
underlying sorts of M̂. M̂ supports all type formers of M in a HOAS style, i.e. there is a type family
(TyM : Tŷ ∙, TmM : Tŷ (∙,TyM)) closed under M's type formers.

We have a variation of Yoneda embedding as a family of maps from M to M̂:

    y : Con → Con̂
    |y Γ| Δ = Sub Δ Γ

    y : Ty Γ → Tm̂ yΓ TyM
    |y A| {Δ} (γ : Sub Δ Γ) = A[γ]

    y : Sub Γ Δ → Sub̂ (yΓ) (yΔ)
    |y σ| {Ξ} (γ : Sub Ξ Γ) = σ ∘ γ

    y : Tm Γ A → Tm̂ (yΓ) (yA)
    |y t| {Δ} (γ : Sub Ξ Γ) = t[γ]

This can be "termified":

    y : Con     → Tm̂ ∙ Û
    y : Ty Γ    → Tm̂ ∙ (yΓ → TyM)
    y : Sub Γ Δ → Tm̂ ∙ (yΓ → yΔ)
    y : Tm Γ A  → Tm̂ ∙ ((γ : yΓ) → TmM (yA γ))

So, working internally in M̂, Yoneda manifests as primops parameterized by external things.

y is invertible on types, terms, and substitutions, by the "Yoneda lemma":

    eval : Tm̂ yΓ TyM → Ty Γ
    eval A = A {Γ} id

    eval :

-- The Yoneda lemma says that y is invertible on substitutions and terms, by evaluation at the identity
-- substitution:

--     eval : Sub̂ yΓ yΔ → Sub Γ Δ
--     eval σ = σ {Γ} id

--     eval : Tm̂ yΓ yA → Tm Γ A
--     eval t = t {Γ} id

-- Note that if M has enough universes, types can be also eval-ed.

--     eval : Tm̂ yΓ yU → Tm Γ U



























----------------------------------------------------------------------------------------------------
